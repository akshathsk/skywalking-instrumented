{"remainingRequest":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/eslint-loader/index.js??ref--14-0!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/trace/utils/trace-table.ts","dependencies":[{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/trace/utils/trace-table.ts","mtime":1666468223624},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1666468223484},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1666468239564},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1666468229004},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1666468239640},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/eslint-loader/index.js","mtime":1666468235000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvY29weS9hcGFjaGUtc2t5d2Fsa2luZy1hcG0tOS4yLjAvc2t5d2Fsa2luZy11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiL2hvbWUvc2sxMTcvZmluYWwtcHJvamVjdC9jb3B5L2FwYWNoZS1za3l3YWxraW5nLWFwbS05LjIuMC9za3l3YWxraW5nLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvY29weS9hcGFjaGUtc2t5d2Fsa2luZy1hcG0tOS4yLjAvc2t5d2Fsa2luZy11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvc2sxMTcvZmluYWwtcHJvamVjdC9jb3B5L2FwYWNoZS1za3l3YWxraW5nLWFwbS05LjIuMC9za3l3YWxraW5nLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvc2sxMTcvZmluYWwtcHJvamVjdC9jb3B5L2FwYWNoZS1za3l3YWxraW5nLWFwbS05LjIuMC9za3l3YWxraW5nLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwoKLyoqCiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmUgb3IgbW9yZQogKiBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLgogKiBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byBZb3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMAogKiAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aAogKiB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KaW1wb3J0IGxvZGFzaCBmcm9tICJsb2Rhc2giOwoKdmFyIFRyYWNlVXRpbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gVHJhY2VVdGlsKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNlVXRpbCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVHJhY2VVdGlsLCBudWxsLCBbewogICAga2V5OiAiYnVpbGRUcmFjZURhdGFMaXN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFRyYWNlRGF0YUxpc3QoZGF0YSkgewogICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGRhdGEubWFwKGZ1bmN0aW9uIChzcGFuKSB7CiAgICAgICAgcmV0dXJuIHNwYW4uc2VydmljZUNvZGU7CiAgICAgIH0pKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2hhbmdlVHJlZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVHJlZShkYXRhLCBjdXJlZW50VHJhY2VJZCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNlZ21lbnRJZExpc3QgPSBbXTsKICAgICAgdmFyIHRyYWNlVHJlZVJlZiA9IHRoaXMuY2hhbmdlVHJlZUNvcmUoZGF0YSk7CiAgICAgIHRyYWNlVHJlZVJlZi5zZWdtZW50SWRHcm91cC5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50SWQpIHsKICAgICAgICBpZiAodHJhY2VUcmVlUmVmLnNlZ21lbnRNYXAuZ2V0KHNlZ21lbnRJZCkucmVmcykgewogICAgICAgICAgdHJhY2VUcmVlUmVmLnNlZ21lbnRNYXAuZ2V0KHNlZ21lbnRJZCkucmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHsKICAgICAgICAgICAgaWYgKHJlZi50cmFjZUlkID09PSBjdXJlZW50VHJhY2VJZCkgewogICAgICAgICAgICAgIF90aGlzLnRyYXZlcnNlVHJlZSh0cmFjZVRyZWVSZWYuc2VnbWVudE1hcC5nZXQocmVmLnBhcmVudFNlZ21lbnRJZCksIHJlZi5wYXJlbnRTcGFuSWQsIHJlZi5wYXJlbnRTZWdtZW50SWQsIHRyYWNlVHJlZVJlZi5zZWdtZW50TWFwLmdldChzZWdtZW50SWQpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsgLy8gc2V0IGEgYnJlYWtwb2ludCBhdCB0aGlzIGxpbmUKCiAgICAgIHRyYWNlVHJlZVJlZi5zZWdtZW50TWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgaWYgKHZhbHVlLnJlZnMgJiYgdmFsdWUucmVmcy5sZW5ndGggPT09IDAgfHwgIXZhbHVlLnJlZnMpIHsKICAgICAgICAgIHNlZ21lbnRJZExpc3QucHVzaCh2YWx1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgc2VnbWVudElkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50SWQpIHsKICAgICAgICBfdGhpcy5jb2xsYXBzZShzZWdtZW50SWQpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHNlZ21lbnRJZExpc3Q7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2hhbmdlU3RhdGlzdGljc1RyZWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVN0YXRpc3RpY3NUcmVlKGRhdGEpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgcmVzdWx0ID0gbmV3IE1hcCgpOwogICAgICB2YXIgdHJhY2VUcmVlUmVmID0gdGhpcy5jaGFuZ2VUcmVlQ29yZShkYXRhKTsKICAgICAgdHJhY2VUcmVlUmVmLnNlZ21lbnRNYXAuZm9yRWFjaChmdW5jdGlvbiAoc3BhbikgewogICAgICAgIHZhciBncm91cFJlZiA9IHNwYW4uZW5kcG9pbnROYW1lICsgIjoiICsgc3Bhbi50eXBlOwoKICAgICAgICBpZiAoc3Bhbi5jaGlsZHJlbiAmJiBzcGFuLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICAgIF90aGlzMi5jYWxjdWxhdGlvbkNoaWxkcmVuKHNwYW4uY2hpbGRyZW4sIHJlc3VsdCk7CgogICAgICAgICAgX3RoaXMyLmNvbGxhcHNlKHNwYW4pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc3VsdC5nZXQoZ3JvdXBSZWYpID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlc3VsdC5zZXQoZ3JvdXBSZWYsIFtdKTsKICAgICAgICAgIHJlc3VsdC5nZXQoZ3JvdXBSZWYpLnB1c2goc3Bhbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5nZXQoZ3JvdXBSZWYpLnB1c2goc3Bhbik7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjaGFuZ2VUcmVlQ29yZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVHJlZUNvcmUoZGF0YSkgewogICAgICAvLyBzZXQgYSBicmVha3BvaW50IGF0IHRoaXMgbGluZQogICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc2VnbWVudE1hcDogbmV3IE1hcCgpLAogICAgICAgICAgc2VnbWVudElkR3JvdXA6IFtdCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIHNlZ21lbnRHcm91cCA9IHt9OwogICAgICB2YXIgc2VnbWVudE1hcCA9IG5ldyBNYXAoKTsKICAgICAgdmFyIHNlZ21lbnRJZEdyb3VwID0gW107CiAgICAgIHZhciBmaXhTcGFucyA9IFtdOwogICAgICB2YXIgc2VnbWVudEhlYWRlcnMgPSBbXTsKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChzcGFuKSB7CiAgICAgICAgaWYgKHNwYW4ucGFyZW50U3BhbklkID09PSAtMSkgewogICAgICAgICAgc2VnbWVudEhlYWRlcnMucHVzaChzcGFuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGluZGV4ID0gZGF0YS5maW5kSW5kZXgoZnVuY3Rpb24gKHBhdGNoU3BhbikgewogICAgICAgICAgICByZXR1cm4gcGF0Y2hTcGFuLnNlZ21lbnRJZCA9PT0gc3Bhbi5zZWdtZW50SWQgJiYgcGF0Y2hTcGFuLnNwYW5JZCA9PT0gc3Bhbi5zcGFuSWQgLSAxOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZml4U3BhbktleUNvbnRlbnQgPSB7CiAgICAgICAgICAgIHRyYWNlSWQ6IHNwYW4udHJhY2VJZCwKICAgICAgICAgICAgc2VnbWVudElkOiBzcGFuLnNlZ21lbnRJZCwKICAgICAgICAgICAgc3BhbklkOiBzcGFuLnNwYW5JZCAtIDEsCiAgICAgICAgICAgIHBhcmVudFNwYW5JZDogc3Bhbi5zcGFuSWQgLSAyCiAgICAgICAgICB9OwoKICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEgJiYgIWxvZGFzaC5maW5kKGZpeFNwYW5zLCBmaXhTcGFuS2V5Q29udGVudCkpIHsKICAgICAgICAgICAgZml4U3BhbnMucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZpeFNwYW5LZXlDb250ZW50KSwge30sIHsKICAgICAgICAgICAgICByZWZzOiBbXSwKICAgICAgICAgICAgICBlbmRwb2ludE5hbWU6ICJWTm9kZTogIi5jb25jYXQoc3Bhbi5zZWdtZW50SWQpLAogICAgICAgICAgICAgIHNlcnZpY2VDb2RlOiAiVmlydHVhbE5vZGUiLAogICAgICAgICAgICAgIHR5cGU6ICJbQnJva2VuXSAiLmNvbmNhdChzcGFuLnR5cGUpLAogICAgICAgICAgICAgIHBlZXI6ICIiLAogICAgICAgICAgICAgIGNvbXBvbmVudDogIlZpcnR1YWxOb2RlOiAjIi5jb25jYXQoc3Bhbi5zcGFuSWQgLSAxKSwKICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLAogICAgICAgICAgICAgIGlzQnJva2VuOiB0cnVlLAogICAgICAgICAgICAgIGxheWVyOiAiQnJva2VuIiwKICAgICAgICAgICAgICB0YWdzOiBbXSwKICAgICAgICAgICAgICBsb2dzOiBbXSwKICAgICAgICAgICAgICBzdGFydFRpbWU6IDAsCiAgICAgICAgICAgICAgZW5kVGltZTogMAogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgc2VnbWVudEhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3BhbikgewogICAgICAgIGlmIChzcGFuLnJlZnMgJiYgc3Bhbi5yZWZzLmxlbmd0aCkgewogICAgICAgICAgc3Bhbi5yZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikgewogICAgICAgICAgICB2YXIgaW5kZXggPSBkYXRhLmZpbmRJbmRleChmdW5jdGlvbiAocGF0Y2hTcGFuKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZi5wYXJlbnRTZWdtZW50SWQgPT09IHBhdGNoU3Bhbi5zZWdtZW50SWQgJiYgcmVmLnBhcmVudFNwYW5JZCA9PT0gcGF0Y2hTcGFuLnNwYW5JZDsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgICAgLy8gY3JlYXRlIGEga25vd24gYnJva2VuIG5vZGUuCiAgICAgICAgICAgICAgdmFyIHBhcmVudFNwYW5JZCA9IHJlZi5wYXJlbnRTcGFuSWQ7CiAgICAgICAgICAgICAgdmFyIGZpeFNwYW5LZXlDb250ZW50ID0gewogICAgICAgICAgICAgICAgdHJhY2VJZDogcmVmLnRyYWNlSWQsCiAgICAgICAgICAgICAgICBzZWdtZW50SWQ6IHJlZi5wYXJlbnRTZWdtZW50SWQsCiAgICAgICAgICAgICAgICBzcGFuSWQ6IHBhcmVudFNwYW5JZCwKICAgICAgICAgICAgICAgIHBhcmVudFNwYW5JZDogcGFyZW50U3BhbklkID4gLTEgPyAwIDogLTEKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBpZiAobG9kYXNoLmZpbmQoZml4U3BhbnMsIGZpeFNwYW5LZXlDb250ZW50KSkgewogICAgICAgICAgICAgICAgZml4U3BhbnMucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZpeFNwYW5LZXlDb250ZW50KSwge30sIHsKICAgICAgICAgICAgICAgICAgcmVmczogW10sCiAgICAgICAgICAgICAgICAgIGVuZHBvaW50TmFtZTogIlZOb2RlOiAiLmNvbmNhdChyZWYucGFyZW50U2VnbWVudElkKSwKICAgICAgICAgICAgICAgICAgc2VydmljZUNvZGU6ICJWaXJ0dWFsTm9kZSIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJbQnJva2VuXSAiLmNvbmNhdChyZWYudHlwZSksCiAgICAgICAgICAgICAgICAgIHBlZXI6ICIiLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICJWaXJ0dWFsTm9kZTogIyIuY29uY2F0KHBhcmVudFNwYW5JZCksCiAgICAgICAgICAgICAgICAgIGlzRXJyb3I6IHRydWUsCiAgICAgICAgICAgICAgICAgIGlzQnJva2VuOiB0cnVlLAogICAgICAgICAgICAgICAgICBsYXllcjogIkJyb2tlbiIsCiAgICAgICAgICAgICAgICAgIHRhZ3M6IFtdLAogICAgICAgICAgICAgICAgICBsb2dzOiBbXSwKICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lOiAwLAogICAgICAgICAgICAgICAgICBlbmRUaW1lOiAwCiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgfSAvLyBpZiByb290IGJyb2tlbiBub2RlIGlzIG5vdCBleGlzdCwgY3JlYXRlIGEgcm9vdCBicm9rZW4gbm9kZS4KCgogICAgICAgICAgICAgIGlmIChmaXhTcGFuS2V5Q29udGVudC5wYXJlbnRTcGFuSWQgPiAtMSkgewogICAgICAgICAgICAgICAgdmFyIGZpeFJvb3RTcGFuS2V5Q29udGVudCA9IHsKICAgICAgICAgICAgICAgICAgdHJhY2VJZDogcmVmLnRyYWNlSWQsCiAgICAgICAgICAgICAgICAgIHNlZ21lbnRJZDogcmVmLnBhcmVudFNlZ21lbnRJZCwKICAgICAgICAgICAgICAgICAgc3BhbklkOiAwLAogICAgICAgICAgICAgICAgICBwYXJlbnRTcGFuSWQ6IC0xCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICghbG9kYXNoLmZpbmQoZml4U3BhbnMsIGZpeFJvb3RTcGFuS2V5Q29udGVudCkpIHsKICAgICAgICAgICAgICAgICAgZml4U3BhbnMucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZpeFJvb3RTcGFuS2V5Q29udGVudCksIHt9LCB7CiAgICAgICAgICAgICAgICAgICAgcmVmczogW10sCiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnROYW1lOiAiVk5vZGU6ICIuY29uY2F0KHJlZi5wYXJlbnRTZWdtZW50SWQpLAogICAgICAgICAgICAgICAgICAgIHNlcnZpY2VDb2RlOiAiVmlydHVhbE5vZGUiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJbQnJva2VuXSAiLmNvbmNhdChyZWYudHlwZSksCiAgICAgICAgICAgICAgICAgICAgcGVlcjogIiIsCiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiAiVmlydHVhbE5vZGU6ICMwIiwKICAgICAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGlzQnJva2VuOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGxheWVyOiAiQnJva2VuIiwKICAgICAgICAgICAgICAgICAgICB0YWdzOiBbXSwKICAgICAgICAgICAgICAgICAgICBsb2dzOiBbXSwKICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IDAsCiAgICAgICAgICAgICAgICAgICAgZW5kVGltZTogMAogICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBbXS5jb25jYXQoZml4U3BhbnMsIF90b0NvbnN1bWFibGVBcnJheShkYXRhKSkuZm9yRWFjaChmdW5jdGlvbiAoZml4U3BhbikgewogICAgICAgIGZpeFNwYW4ubGFiZWwgPSBmaXhTcGFuLmVuZHBvaW50TmFtZSB8fCAibm8gb3BlcmF0aW9uIG5hbWUiOwogICAgICAgIGZpeFNwYW4uY2hpbGRyZW4gPSBbXTsKICAgICAgICB2YXIgaWQgPSBmaXhTcGFuLnNlZ21lbnRJZCB8fCAidG9wIjsKCiAgICAgICAgaWYgKHNlZ21lbnRHcm91cFtpZF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgc2VnbWVudElkR3JvdXAucHVzaChpZCk7CiAgICAgICAgICBzZWdtZW50R3JvdXBbaWRdID0gW107CiAgICAgICAgICBzZWdtZW50R3JvdXBbaWRdLnB1c2goZml4U3Bhbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlZ21lbnRHcm91cFtpZF0ucHVzaChmaXhTcGFuKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBzZWdtZW50SWRHcm91cC5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50SWQpIHsKICAgICAgICB2YXIgY3VycmVudFNlZ21lbnRTZXQgPSBzZWdtZW50R3JvdXBbc2VnbWVudElkXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gYi5wYXJlbnRTcGFuSWQgLSBhLnBhcmVudFNwYW5JZDsKICAgICAgICB9KTsKICAgICAgICBjdXJyZW50U2VnbWVudFNldC5mb3JFYWNoKGZ1bmN0aW9uIChjdXJTZWdtZW50KSB7CiAgICAgICAgICB2YXIgaW5kZXggPSBjdXJyZW50U2VnbWVudFNldC5maW5kSW5kZXgoZnVuY3Rpb24gKGN1clNlZ21lbnQyKSB7CiAgICAgICAgICAgIHJldHVybiBjdXJTZWdtZW50Mi5zcGFuSWQgPT09IGN1clNlZ21lbnQucGFyZW50U3BhbklkOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICBpZiAoY3VycmVudFNlZ21lbnRTZXRbaW5kZXhdLmlzQnJva2VuICYmIGN1cnJlbnRTZWdtZW50U2V0W2luZGV4XS5wYXJlbnRTcGFuSWQgPT09IC0xIHx8ICFjdXJyZW50U2VnbWVudFNldFtpbmRleF0uaXNCcm9rZW4pIHsKICAgICAgICAgICAgICBjdXJyZW50U2VnbWVudFNldFtpbmRleF0uY2hpbGRyZW4ucHVzaChjdXJTZWdtZW50KTsKICAgICAgICAgICAgICBjdXJyZW50U2VnbWVudFNldFtpbmRleF0uY2hpbGRyZW4uc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuc3BhbklkIC0gYi5zcGFuSWQ7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoY3VyU2VnbWVudC5pc0Jyb2tlbikgewogICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBsb2Rhc2guZmlsdGVyKGRhdGEsIGZ1bmN0aW9uIChzcGFuKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5maW5kKHNwYW4ucmVmcywgewogICAgICAgICAgICAgICAgdHJhY2VJZDogY3VyU2VnbWVudC50cmFjZUlkLAogICAgICAgICAgICAgICAgcGFyZW50U2VnbWVudElkOiBjdXJTZWdtZW50LnNlZ21lbnRJZCwKICAgICAgICAgICAgICAgIHBhcmVudFNwYW5JZDogY3VyU2VnbWVudC5zcGFuSWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgdmFyIF9jdXJTZWdtZW50JGNoaWxkcmVuOwoKICAgICAgICAgICAgICBjdXJTZWdtZW50LmNoaWxkcmVuID0gY3VyU2VnbWVudC5jaGlsZHJlbiB8fCBbXTsKCiAgICAgICAgICAgICAgKF9jdXJTZWdtZW50JGNoaWxkcmVuID0gY3VyU2VnbWVudC5jaGlsZHJlbikucHVzaC5hcHBseShfY3VyU2VnbWVudCRjaGlsZHJlbiwgX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkcmVuKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBzZWdtZW50TWFwLnNldChzZWdtZW50SWQsIGN1cnJlbnRTZWdtZW50U2V0W2N1cnJlbnRTZWdtZW50U2V0Lmxlbmd0aCAtIDFdKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgc2VnbWVudE1hcDogc2VnbWVudE1hcCwKICAgICAgICBzZWdtZW50SWRHcm91cDogc2VnbWVudElkR3JvdXAKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb2xsYXBzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29sbGFwc2Uoc3BhbikgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmIChzcGFuLmNoaWxkcmVuKSB7CiAgICAgICAgdmFyIGR1ciA9IHNwYW4uZW5kVGltZSAtIHNwYW4uc3RhcnRUaW1lOwogICAgICAgIHNwYW4uY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hsaWQpIHsKICAgICAgICAgIGR1ciAtPSBjaGxpZC5lbmRUaW1lIC0gY2hsaWQuc3RhcnRUaW1lOwogICAgICAgIH0pOwogICAgICAgIHNwYW4uZHVyID0gZHVyIDwgMCA/IDAgOiBkdXI7CiAgICAgICAgc3Bhbi5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGxpZCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMy5jb2xsYXBzZShjaGxpZCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cmF2ZXJzZVRyZWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRyYXZlcnNlVHJlZShub2RlLCBzcGFuSWQsIHNlZ21lbnRJZCwgY2hpbGROb2RlKSB7CiAgICAgIGlmICghbm9kZSB8fCBub2RlLmlzQnJva2VuKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAobm9kZS5zcGFuSWQgPT09IHNwYW5JZCAmJiBub2RlLnNlZ21lbnRJZCA9PT0gc2VnbWVudElkKSB7CiAgICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKGNoaWxkTm9kZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm9kZS5jaGlsZHJlbiksCiAgICAgICAgICAgIF9zdGVwOwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIGdyYW5kY2hpbGQgPSBfc3RlcC52YWx1ZTsKICAgICAgICAgICAgdGhpcy50cmF2ZXJzZVRyZWUoZ3JhbmRjaGlsZCwgc3BhbklkLCBzZWdtZW50SWQsIGNoaWxkTm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldFNwYW5Hcm91cERhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNwYW5Hcm91cERhdGEoZ3JvdXBzcGFucywgZ3JvdXBSZWYpIHsKICAgICAgdmFyIG1heFRpbWUgPSAwOwogICAgICB2YXIgbWluVGltZSA9IDA7CiAgICAgIHZhciBzdW1UaW1lID0gMDsKICAgICAgdmFyIGNvdW50ID0gZ3JvdXBzcGFucy5sZW5ndGg7CiAgICAgIGdyb3Vwc3BhbnMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXBzcGFuKSB7CiAgICAgICAgdmFyIGR1cmF0aW9uID0gZ3JvdXBzcGFuLmR1ciB8fCAwOwoKICAgICAgICBpZiAoZHVyYXRpb24gPiBtYXhUaW1lKSB7CiAgICAgICAgICBtYXhUaW1lID0gZHVyYXRpb247CiAgICAgICAgfQoKICAgICAgICBpZiAoZHVyYXRpb24gPCBtaW5UaW1lKSB7CiAgICAgICAgICBtaW5UaW1lID0gZHVyYXRpb247CiAgICAgICAgfQoKICAgICAgICBzdW1UaW1lID0gc3VtVGltZSArIGR1cmF0aW9uOwogICAgICB9KTsKICAgICAgdmFyIGF2Z1RpbWUgPSBjb3VudCA9PT0gMCA/IDAgOiBzdW1UaW1lIC8gY291bnQ7CiAgICAgIHJldHVybiB7CiAgICAgICAgZ3JvdXBSZWY6IGdyb3VwUmVmLAogICAgICAgIG1heFRpbWU6IG1heFRpbWUsCiAgICAgICAgbWluVGltZTogbWluVGltZSwKICAgICAgICBzdW1UaW1lOiBzdW1UaW1lLAogICAgICAgIGF2Z1RpbWU6IGF2Z1RpbWUsCiAgICAgICAgY291bnQ6IGNvdW50CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiY2FsY3VsYXRpb25DaGlsZHJlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRpb25DaGlsZHJlbihub2RlcywgcmVzdWx0KSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkgewogICAgICAgIHZhciBncm91cFJlZiA9IG5vZGUuZW5kcG9pbnROYW1lICsgIjoiICsgbm9kZS50eXBlOwoKICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICAgIF90aGlzNC5jYWxjdWxhdGlvbkNoaWxkcmVuKG5vZGUuY2hpbGRyZW4sIHJlc3VsdCk7CiAgICAgICAgfQoKICAgICAgICBpZiAocmVzdWx0LmdldChncm91cFJlZikgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVzdWx0LnNldChncm91cFJlZiwgW10pOwogICAgICAgICAgcmVzdWx0LmdldChncm91cFJlZikucHVzaChub2RlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0LmdldChncm91cFJlZikucHVzaChub2RlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRyYWNlVXRpbDsKfSgpOwoKZXhwb3J0IHsgVHJhY2VVdGlsIGFzIGRlZmF1bHQgfTs="},null]}