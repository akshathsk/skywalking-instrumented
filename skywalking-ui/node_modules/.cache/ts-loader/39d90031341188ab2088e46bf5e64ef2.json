{"remainingRequest":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/eslint-loader/index.js??ref--14-0!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/store/modules/network-profiling.ts","dependencies":[{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/store/modules/network-profiling.ts","mtime":1661850019000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1661850018000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1663881222784},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1663881222612},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1663881224500},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1663881224684},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/eslint-loader/index.js","mtime":1663881222992}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvYXBhY2hlLXNreXdhbGtpbmctYXBtLTkuMi4wL3NreXdhbGtpbmctdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIgZnJvbSAiL2hvbWUvc2sxMTcvZmluYWwtcHJvamVjdC9hcGFjaGUtc2t5d2Fsa2luZy1hcG0tOS4yLjAvc2t5d2Fsa2luZy11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CgovKioKICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZSBvciBtb3JlCiAqIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuCiAqIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlIHRvIFlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wCiAqICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoCiAqIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwppbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gInBpbmlhIjsKaW1wb3J0IHsgc3RvcmUgfSBmcm9tICJAL3N0b3JlIjsKaW1wb3J0IGdyYXBocWwgZnJvbSAiQC9ncmFwaHFsIjsKaW1wb3J0IHsgRWxNZXNzYWdlIH0gZnJvbSAiZWxlbWVudC1wbHVzIjsKZXhwb3J0IHZhciBuZXR3b3JrUHJvZmlsaW5nU3RvcmUgPSBkZWZpbmVTdG9yZSh7CiAgaWQ6ICJuZXR3b3JrUHJvZmlsaW5nIiwKICBzdGF0ZTogZnVuY3Rpb24gc3RhdGUoKSB7CiAgICByZXR1cm4gewogICAgICBuZXR3b3JrVGFza3M6IFtdLAogICAgICBuZXR3b3JrVGlwOiAiIiwKICAgICAgc2VsZWN0ZWROZXR3b3JrVGFzazoge30sCiAgICAgIG5vZGVzOiBbXSwKICAgICAgY2FsbHM6IFtdLAogICAgICBub2RlOiBudWxsLAogICAgICBjYWxsOiBudWxsLAogICAgICBtZXRyaWNzTGF5b3V0OiBbXSwKICAgICAgc2VsZWN0ZWRNZXRyaWM6IG51bGwsCiAgICAgIGFjdGl2ZU1ldHJpY0luZGV4OiAiIiwKICAgICAgYWxpdmVOZXR3b3JrOiBmYWxzZSwKICAgICAgbG9hZE5vZGVzOiBmYWxzZQogICAgfTsKICB9LAogIGFjdGlvbnM6IHsKICAgIHNldFNlbGVjdGVkTmV0d29ya1Rhc2s6IGZ1bmN0aW9uIHNldFNlbGVjdGVkTmV0d29ya1Rhc2sodGFzaykgewogICAgICB0aGlzLnNlbGVjdGVkTmV0d29ya1Rhc2sgPSB0YXNrIHx8IHt9OwogICAgfSwKICAgIHNldE5vZGU6IGZ1bmN0aW9uIHNldE5vZGUobm9kZSkgewogICAgICB0aGlzLm5vZGUgPSBub2RlOwogICAgfSwKICAgIHNldExpbms6IGZ1bmN0aW9uIHNldExpbmsobGluaykgewogICAgICB0aGlzLmNhbGwgPSBsaW5rOwogICAgfSwKICAgIHNldE1ldHJpY3NMYXlvdXQ6IGZ1bmN0aW9uIHNldE1ldHJpY3NMYXlvdXQobGF5b3V0KSB7CiAgICAgIHRoaXMubWV0cmljc0xheW91dCA9IGxheW91dDsKICAgIH0sCiAgICBzZXRTZWxlY3RlZE1ldHJpYzogZnVuY3Rpb24gc2V0U2VsZWN0ZWRNZXRyaWMoaXRlbSkgewogICAgICB0aGlzLnNlbGVjdGVkTWV0cmljID0gaXRlbTsKICAgIH0sCiAgICBzZXRBY3RpdmVJdGVtOiBmdW5jdGlvbiBzZXRBY3RpdmVJdGVtKGluZGV4KSB7CiAgICAgIHRoaXMuYWN0aXZlTWV0cmljSW5kZXggPSBpbmRleDsKICAgIH0sCiAgICBzZXRUb3BvbG9neTogZnVuY3Rpb24gc2V0VG9wb2xvZ3koZGF0YSkgewogICAgICB2YXIgb2JqID0ge307CiAgICAgIHZhciBjYWxscyA9IChkYXRhLmNhbGxzIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG5leHQpIHsKICAgICAgICBpZiAoIW9ialtuZXh0LmlkXSkgewogICAgICAgICAgb2JqW25leHQuaWRdID0gdHJ1ZTsKICAgICAgICAgIG5leHQudmFsdWUgPSBuZXh0LnZhbHVlIHx8IDE7CgogICAgICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGEubm9kZXMpLAogICAgICAgICAgICAgIF9zdGVwOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIG5vZGUgPSBfc3RlcC52YWx1ZTsKCiAgICAgICAgICAgICAgaWYgKG5leHQuc291cmNlID09PSBub2RlLmlkKSB7CiAgICAgICAgICAgICAgICBuZXh0LnNvdXJjZU9iaiA9IG5vZGU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAobmV4dC50YXJnZXQgPT09IG5vZGUuaWQpIHsKICAgICAgICAgICAgICAgIG5leHQudGFyZ2V0T2JqID0gbm9kZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBuZXh0LnZhbHVlID0gbmV4dC52YWx1ZSB8fCAxOwogICAgICAgICAgcHJldi5wdXNoKG5leHQpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHByZXY7CiAgICAgIH0sIFtdKTsKICAgICAgY2FsbHMgPSBjYWxscy5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICBkLnNvdXJjZUlkID0gZC5zb3VyY2U7CiAgICAgICAgZC50YXJnZXRJZCA9IGQudGFyZ2V0OwogICAgICAgIGQuc291cmNlID0gZC5zb3VyY2VPYmo7CiAgICAgICAgZC50YXJnZXQgPSBkLnRhcmdldE9iajsKICAgICAgICBkZWxldGUgZC5zb3VyY2VPYmo7CiAgICAgICAgZGVsZXRlIGQudGFyZ2V0T2JqOwogICAgICAgIHJldHVybiBkOwogICAgICB9KTsKICAgICAgdGhpcy5jYWxscyA9IGNhbGxzOwogICAgICB0aGlzLm5vZGVzID0gZGF0YS5ub2RlczsKICAgIH0sCiAgICBjcmVhdGVOZXR3b3JrVGFzazogZnVuY3Rpb24gY3JlYXRlTmV0d29ya1Rhc2socGFyYW0pIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIGdyYXBocWwucXVlcnkoIm5ld05ldHdvcmtQcm9maWxpbmciKS5wYXJhbXMoewogICAgICAgICAgICAgICAgICByZXF1ZXN0OiB7CiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZDogcGFyYW0uc2VydmljZUluc3RhbmNlSWQKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFyZXMuZGF0YS5lcnJvcnMpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlcy5kYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0VGFza0xpc3Q6IGZ1bmN0aW9uIGdldFRhc2tMaXN0KHBhcmFtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zZXJ2aWNlSWQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe30pOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gZ3JhcGhxbC5xdWVyeSgiZ2V0RUJQRlRhc2tzIikucGFyYW1zKHBhcmFtcyk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMubmV0d29ya1RpcCA9ICIiOwoKICAgICAgICAgICAgICAgIGlmICghcmVzLmRhdGEuZXJyb3JzKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlcy5kYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX3RoaXMubmV0d29ya1Rhc2tzID0gcmVzLmRhdGEuZGF0YS5xdWVyeUVCUEZUYXNrcyB8fCBbXTsKICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkTmV0d29ya1Rhc2sgPSBfdGhpcy5uZXR3b3JrVGFza3NbMF0gfHwge307CgogICAgICAgICAgICAgICAgX3RoaXMuc2V0U2VsZWN0ZWROZXR3b3JrVGFzayhfdGhpcy5zZWxlY3RlZE5ldHdvcmtUYXNrKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAga2VlcE5ldHdvcmtQcm9maWxpbmc6IGZ1bmN0aW9uIGtlZXBOZXR3b3JrUHJvZmlsaW5nKHRhc2tJZCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciByZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICh0YXNrSWQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe30pOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gZ3JhcGhxbC5xdWVyeSgiYWxpdmVOZXR3b3JrUHJvZmlsaW5nIikucGFyYW1zKHsKICAgICAgICAgICAgICAgICAgdGFza0lkOiB0YXNrSWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIF90aGlzMi5hbGl2ZU1lc3NhZ2UgPSAiIjsKCiAgICAgICAgICAgICAgICBpZiAoIXJlcy5kYXRhLmVycm9ycykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXMuZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF90aGlzMi5hbGl2ZU5ldHdvcmsgPSByZXMuZGF0YS5kYXRhLmtlZXBFQlBGTmV0d29ya1Byb2ZpbGluZy5zdGF0dXM7CgogICAgICAgICAgICAgICAgaWYgKCFfdGhpczIuYWxpdmVOZXR3b3JrKSB7CiAgICAgICAgICAgICAgICAgIEVsTWVzc2FnZS53YXJuaW5nKHJlcy5kYXRhLmRhdGEua2VlcEVCUEZOZXR3b3JrUHJvZmlsaW5nLmVycm9yUmVhc29uKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgcmVzLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0UHJvY2Vzc1RvcG9sb2d5OiBmdW5jdGlvbiBnZXRQcm9jZXNzVG9wb2xvZ3kocGFyYW1zKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIHJlcywgdG9wb2xvZ3k7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzMy5sb2FkTm9kZXMgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGdyYXBocWwucXVlcnkoImdldFByb2Nlc3NUb3BvbG9neSIpLnBhcmFtcyhwYXJhbXMpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIF90aGlzMy5sb2FkTm9kZXMgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBpZiAoIXJlcy5kYXRhLmVycm9ycykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzMy5ub2RlcyA9IFtdOwogICAgICAgICAgICAgICAgX3RoaXMzLmNhbGxzID0gW107CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgcmVzLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICB0b3BvbG9neSA9IHJlcy5kYXRhLmRhdGEudG9wb2xvZ3k7CgogICAgICAgICAgICAgICAgX3RoaXMzLnNldFRvcG9sb2d5KHRvcG9sb2d5KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgcmVzLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9KTsKZXhwb3J0IGZ1bmN0aW9uIHVzZU5ldHdvcmtQcm9maWxpbmdTdG9yZSgpIHsKICByZXR1cm4gbmV0d29ya1Byb2ZpbGluZ1N0b3JlKHN0b3JlKTsKfQ=="},null]}