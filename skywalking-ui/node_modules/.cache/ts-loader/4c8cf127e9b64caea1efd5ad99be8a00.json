{"remainingRequest":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/event/Header.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/event/Header.vue","mtime":1666468223596},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1666468223484},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1666468239564},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1666468229004},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1666468239640},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js","mtime":1666468249808}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}