{"remainingRequest":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/configuration/widget/metric/Index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/configuration/widget/metric/Index.vue","mtime":1661850019000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1661850018000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1663881222784},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1663881222612},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1663881224500},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1663881224684},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1663881222784},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js","mtime":1663881224404}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvYXBhY2hlLXNreXdhbGtpbmctYXBtLTkuMi4wL3NreXdhbGtpbmctdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvaG9tZS9zazExNy9maW5hbC1wcm9qZWN0L2FwYWNoZS1za3l3YWxraW5nLWFwbS05LjIuMC9za3l3YWxraW5nLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvYXBhY2hlLXNreXdhbGtpbmctYXBtLTkuMi4wL3NreXdhbGtpbmctdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCB2U2hvdyBhcyBfdlNob3csIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgbm9ybWFsaXplQ2xhc3MgYXMgX25vcm1hbGl6ZUNsYXNzLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoU2NvcGVJZCA9IGZ1bmN0aW9uIF93aXRoU2NvcGVJZChuKSB7CiAgcmV0dXJuIF9wdXNoU2NvcGVJZCgiZGF0YS12LTA3MjY2NTljIiksIG4gPSBuKCksIF9wb3BTY29wZUlkKCksIG47Cn07Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJkcy1uYW1lIgp9Owp2YXIgX2hvaXN0ZWRfMiA9IFsib25DbGljayJdOwp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImNoYXJ0LXR5cGVzIgp9Owp2YXIgX2hvaXN0ZWRfNCA9IFsib25DbGljayJdOwppbXBvcnQgeyByZWFjdGl2ZSwgcmVmLCBjb21wdXRlZCB9IGZyb20gInZ1ZSI7CmltcG9ydCB7IHVzZURhc2hib2FyZFN0b3JlIH0gZnJvbSAiQC9zdG9yZS9tb2R1bGVzL2Rhc2hib2FyZCI7CmltcG9ydCB7IE1ldHJpY1R5cGVzLCBMaXN0Q2hhcnRUeXBlcywgRGVmYXVsdEdyYXBoQ29uZmlnLCBFbnRpdHlUeXBlLCBDaGFydFR5cGVzLCBQb2RzQ2hhcnRUeXBlcywgTWV0cmljc1R5cGUgfSBmcm9tICIuLi8uLi8uLi9kYXRhIjsKaW1wb3J0IHsgRWxNZXNzYWdlIH0gZnJvbSAiZWxlbWVudC1wbHVzIjsKaW1wb3J0IEljb24gZnJvbSAiQC9jb21wb25lbnRzL0ljb24udnVlIjsKaW1wb3J0IHsgdXNlUXVlcnlQcm9jZXNzb3IsIHVzZVNvdXJjZVByb2Nlc3NvciwgdXNlR2V0TWV0cmljRW50aXR5IH0gZnJvbSAiQC9ob29rcy91c2VQcm9jZXNzb3IiOwppbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAidnVlLWkxOG4iOwppbXBvcnQgU3RhbmRhcmQgZnJvbSAiLi9TdGFuZGFyZC52dWUiOwovKmdsb2JhbCBkZWZpbmVFbWl0cyAqLwoKZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoewogIGVtaXRzOiBbInVwZGF0ZSIsICJsb2FkaW5nIl0sCiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKF9fcHJvcHMsIF9yZWYpIHsKICAgIHZhciBlbWl0ID0gX3JlZi5lbWl0OwoKICAgIHZhciBfdXNlSTE4biA9IHVzZUkxOG4oKSwKICAgICAgICB0ID0gX3VzZUkxOG4udDsKCiAgICB2YXIgZGFzaGJvYXJkU3RvcmUgPSB1c2VEYXNoYm9hcmRTdG9yZSgpOwogICAgdmFyIG1ldHJpY3MgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBkYXNoYm9hcmRTdG9yZS5zZWxlY3RlZEdyaWQubWV0cmljcyB8fCBbXTsKICAgIH0pOwogICAgdmFyIGdyYXBoID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZGFzaGJvYXJkU3RvcmUuc2VsZWN0ZWRHcmlkLmdyYXBoIHx8IHt9OwogICAgfSk7CiAgICB2YXIgbWV0cmljVHlwZXMgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBkYXNoYm9hcmRTdG9yZS5zZWxlY3RlZEdyaWQubWV0cmljVHlwZXMgfHwgW107CiAgICB9KTsKICAgIHZhciBzdGF0ZXMgPSByZWFjdGl2ZSh7CiAgICAgIG1ldHJpY3M6IG1ldHJpY3MudmFsdWUubGVuZ3RoID8gbWV0cmljcy52YWx1ZSA6IFsiIl0sCiAgICAgIG1ldHJpY1R5cGVzOiBtZXRyaWNUeXBlcy52YWx1ZS5sZW5ndGggPyBtZXRyaWNUeXBlcy52YWx1ZSA6IFsiIl0sCiAgICAgIG1ldHJpY1R5cGVMaXN0OiBbXSwKICAgICAgaXNMaXN0OiBmYWxzZSwKICAgICAgbWV0cmljTGlzdDogW10sCiAgICAgIGRhc2hib2FyZE5hbWU6IGdyYXBoLnZhbHVlLmRhc2hib2FyZE5hbWUsCiAgICAgIGRhc2hib2FyZExpc3Q6IFt7CiAgICAgICAgbGFiZWw6ICIiLAogICAgICAgIHZhbHVlOiAiIgogICAgICB9XQogICAgfSk7CiAgICB2YXIgY3VycmVudE1ldHJpY0NvbmZpZyA9IHJlZih7CiAgICAgIHVuaXQ6ICIiLAogICAgICBsYWJlbDogIiIsCiAgICAgIGxhYmVsc0luZGV4OiAiIiwKICAgICAgY2FsY3VsYXRpb246ICIiLAogICAgICBzb3J0T3JkZXI6ICJERVMiCiAgICB9KTsKICAgIHN0YXRlcy5pc0xpc3QgPSBMaXN0Q2hhcnRUeXBlcy5pbmNsdWRlcyhncmFwaC52YWx1ZS50eXBlKTsKICAgIHZhciBkZWZhdWx0TGVuID0gcmVmKHN0YXRlcy5pc0xpc3QgPyA1IDogMjApOwogICAgc2V0RGFzaGJvYXJkcygpOwogICAgc2V0TWV0cmljVHlwZSgpOwogICAgdmFyIHNldFZpc1R5cGVzID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICB2YXIgZ3JhcGhzID0gW107CgogICAgICBpZiAoZGFzaGJvYXJkU3RvcmUuZW50aXR5ID09PSBFbnRpdHlUeXBlWzBdLnZhbHVlKSB7CiAgICAgICAgZ3JhcGhzID0gQ2hhcnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiAhW0NoYXJ0VHlwZXNbN10udmFsdWUsIENoYXJ0VHlwZXNbOF0udmFsdWVdLmluY2x1ZGVzKGQudmFsdWUpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKGRhc2hib2FyZFN0b3JlLmVudGl0eSA9PT0gRW50aXR5VHlwZVsxXS52YWx1ZSkgewogICAgICAgIGdyYXBocyA9IENoYXJ0VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gIVBvZHNDaGFydFR5cGVzLmluY2x1ZGVzKGQudmFsdWUpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGdyYXBocyA9IENoYXJ0VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gIUxpc3RDaGFydFR5cGVzLmluY2x1ZGVzKGQudmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gZ3JhcGhzOwogICAgfSk7CgogICAgZnVuY3Rpb24gc2V0TWV0cmljVHlwZShfeCkgewogICAgICByZXR1cm4gX3NldE1ldHJpY1R5cGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfc2V0TWV0cmljVHlwZSgpIHsKICAgICAgX3NldE1ldHJpY1R5cGUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY2hhcnQpIHsKICAgICAgICB2YXIgZywgYXJyLCBqc29uLCBtZXRyaWNzLCBtLCBfaXRlcmF0b3IsIF9zdGVwLCBtZXRyaWMsIF9hcnI7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGcgPSBjaGFydCB8fCBkYXNoYm9hcmRTdG9yZS5zZWxlY3RlZEdyaWQuZ3JhcGggfHwge307CiAgICAgICAgICAgICAgICBhcnIgPSBzdGF0ZXMubWV0cmljTGlzdDsKCiAgICAgICAgICAgICAgICBpZiAoY2hhcnQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBkYXNoYm9hcmRTdG9yZS5mZXRjaE1ldHJpY0xpc3QoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAganNvbiA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFqc29uLmVycm9ycykgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgRWxNZXNzYWdlLmVycm9yKGpzb24uZXJyb3JzKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBhcnIgPSBqc29uLmRhdGEubWV0cmljczsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIHN0YXRlcy5tZXRyaWNMaXN0ID0gKGFyciB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZXMuaXNMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGQudHlwZSA9PT0gTWV0cmljc1R5cGUuUkVHVUxBUl9WQUxVRSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGcudHlwZSA9PT0gIlRhYmxlIikgewogICAgICAgICAgICAgICAgICAgIGlmIChkLnR5cGUgPT09IE1ldHJpY3NUeXBlLkxBQkVMRURfVkFMVUUgfHwgZC50eXBlID09PSBNZXRyaWNzVHlwZS5SRUdVTEFSX1ZBTFVFKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbWV0cmljcyA9IHN0YXRlcy5tZXRyaWNMaXN0LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVzLm1ldHJpY3MuaW5jbHVkZXMoZC52YWx1ZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAobWV0cmljcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgLy8ga2VlcCBzdGF0ZXMubWV0cmljcyBpbmRleAogICAgICAgICAgICAgICAgICBtID0gbWV0cmljcy5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC52YWx1ZTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHN0YXRlcy5tZXRyaWNzID0gc3RhdGVzLm1ldHJpY3MuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uaW5jbHVkZXMoZCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgc3RhdGVzLm1ldHJpY3MgPSBbIiJdOwogICAgICAgICAgICAgICAgICBzdGF0ZXMubWV0cmljVHlwZXMgPSBbIiJdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGRhc2hib2FyZFN0b3JlLnNlbGVjdFdpZGdldChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZCksIHt9LCB7CiAgICAgICAgICAgICAgICAgIG1ldHJpY3M6IHN0YXRlcy5tZXRyaWNzLAogICAgICAgICAgICAgICAgICBtZXRyaWNUeXBlczogc3RhdGVzLm1ldHJpY1R5cGVzLAogICAgICAgICAgICAgICAgICBncmFwaDogZwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgc3RhdGVzLm1ldHJpY1R5cGVMaXN0ID0gW107CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihtZXRyaWNzKTsKCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICAgIG1ldHJpYyA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGVzLm1ldHJpY3MuaW5jbHVkZXMobWV0cmljLnZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgX2FyciA9IHNldE1ldHJpY1R5cGVMaXN0KG1ldHJpYy50eXBlKTsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlcy5tZXRyaWNUeXBlTGlzdC5wdXNoKF9hcnIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZXMubWV0cmljcyAmJiBzdGF0ZXMubWV0cmljc1swXSkgewogICAgICAgICAgICAgICAgICBxdWVyeU1ldHJpY3MoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGVtaXQoInVwZGF0ZSIsIHt9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CiAgICAgIHJldHVybiBfc2V0TWV0cmljVHlwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldERhc2hib2FyZHModHlwZSkgewogICAgICB2YXIgY2hhcnQgPSB0eXBlIHx8IGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZC5ncmFwaCB8fCB7fTsKICAgICAgdmFyIGxpc3QgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImRhc2hib2FyZHMiKSB8fCAiW10iKTsKICAgICAgdmFyIGFyciA9IGxpc3QucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBkKSB7CiAgICAgICAgaWYgKGQubGF5ZXIgPT09IGRhc2hib2FyZFN0b3JlLmxheWVySWQpIHsKICAgICAgICAgIGlmIChkLmVudGl0eSA9PT0gRW50aXR5VHlwZVswXS52YWx1ZSAmJiBjaGFydC50eXBlID09PSAiU2VydmljZUxpc3QiIHx8IGQuZW50aXR5ID09PSBFbnRpdHlUeXBlWzJdLnZhbHVlICYmIGNoYXJ0LnR5cGUgPT09ICJFbmRwb2ludExpc3QiIHx8IGQuZW50aXR5ID09PSBFbnRpdHlUeXBlWzNdLnZhbHVlICYmIGNoYXJ0LnR5cGUgPT09ICJJbnN0YW5jZUxpc3QiKSB7CiAgICAgICAgICAgIHByZXYucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGQpLCB7fSwgewogICAgICAgICAgICAgIHZhbHVlOiBkLm5hbWUsCiAgICAgICAgICAgICAgbGFiZWw6IGQubmFtZQogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcHJldjsKICAgICAgfSwgW10pOwogICAgICBzdGF0ZXMuZGFzaGJvYXJkTGlzdCA9IGFyci5sZW5ndGggPyBhcnIgOiBbewogICAgICAgIGxhYmVsOiAiIiwKICAgICAgICB2YWx1ZTogIiIKICAgICAgfV07CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlQ2hhcnRUeXBlKGl0ZW0pIHsKICAgICAgdmFyIGNoYXJ0ID0gRGVmYXVsdEdyYXBoQ29uZmlnW2l0ZW0udmFsdWVdIHx8IHt9OwogICAgICBzdGF0ZXMuaXNMaXN0ID0gTGlzdENoYXJ0VHlwZXMuaW5jbHVkZXMoY2hhcnQudHlwZSk7CgogICAgICBpZiAoc3RhdGVzLmlzTGlzdCkgewogICAgICAgIGRhc2hib2FyZFN0b3JlLnNlbGVjdFdpZGdldChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZCksIHt9LCB7CiAgICAgICAgICBtZXRyaWNzOiBbIiJdLAogICAgICAgICAgbWV0cmljVHlwZXM6IFsiIl0KICAgICAgICB9KSk7CiAgICAgICAgc3RhdGVzLm1ldHJpY3MgPSBbIiJdOwogICAgICAgIHN0YXRlcy5tZXRyaWNUeXBlcyA9IFsiIl07CiAgICAgICAgZGVmYXVsdExlbi52YWx1ZSA9IDU7CiAgICAgIH0KCiAgICAgIHNldE1ldHJpY1R5cGUoY2hhcnQpOwogICAgICBzZXREYXNoYm9hcmRzKGNoYXJ0LnR5cGUpOwogICAgICBzdGF0ZXMuZGFzaGJvYXJkTmFtZSA9ICIiOwogICAgICBkZWZhdWx0TGVuLnZhbHVlID0gMTA7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlTWV0cmljcyhpbmRleCwgYXJyKSB7CiAgICAgIGlmICghYXJyLmxlbmd0aCkgewogICAgICAgIHN0YXRlcy5tZXRyaWNUeXBlTGlzdCA9IFtdOwogICAgICAgIHN0YXRlcy5tZXRyaWNUeXBlcyA9IFtdOwogICAgICAgIGRhc2hib2FyZFN0b3JlLnNlbGVjdFdpZGdldChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZCksIHsKICAgICAgICAgIG1ldHJpY1R5cGVzOiBzdGF0ZXMubWV0cmljVHlwZXMsCiAgICAgICAgICBtZXRyaWNzOiBzdGF0ZXMubWV0cmljcwogICAgICAgIH0pKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHN0YXRlcy5tZXRyaWNzW2luZGV4XSA9IGFyclswXS52YWx1ZTsKICAgICAgdmFyIHR5cGVPZk1ldHJpY3MgPSBhcnJbMF0udHlwZTsKICAgICAgc3RhdGVzLm1ldHJpY1R5cGVMaXN0W2luZGV4XSA9IHNldE1ldHJpY1R5cGVMaXN0KHR5cGVPZk1ldHJpY3MpOwogICAgICBzdGF0ZXMubWV0cmljVHlwZXNbaW5kZXhdID0gTWV0cmljVHlwZXNbdHlwZU9mTWV0cmljc11bMF0udmFsdWU7CiAgICAgIGRhc2hib2FyZFN0b3JlLnNlbGVjdFdpZGdldChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZCksIHsKICAgICAgICBtZXRyaWNUeXBlczogc3RhdGVzLm1ldHJpY1R5cGVzLAogICAgICAgIG1ldHJpY3M6IHN0YXRlcy5tZXRyaWNzCiAgICAgIH0pKTsKCiAgICAgIGlmIChzdGF0ZXMuaXNMaXN0KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBxdWVyeU1ldHJpY3MoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VNZXRyaWNUeXBlKGluZGV4LCBvcHQpIHsKICAgICAgdmFyIG1ldHJpYyA9IHN0YXRlcy5tZXRyaWNMaXN0LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBzdGF0ZXMubWV0cmljc1tpbmRleF0gPT09IGQudmFsdWU7CiAgICAgIH0pWzBdIHx8IHt9OwogICAgICB2YXIgbCA9IHNldE1ldHJpY1R5cGVMaXN0KG1ldHJpYy50eXBlKTsKCiAgICAgIGlmIChzdGF0ZXMuaXNMaXN0KSB7CiAgICAgICAgc3RhdGVzLm1ldHJpY1R5cGVzW2luZGV4XSA9IG9wdFswXS52YWx1ZTsKICAgICAgICBzdGF0ZXMubWV0cmljVHlwZUxpc3RbaW5kZXhdID0gbDsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdGF0ZXMubWV0cmljVHlwZXMgPSBzdGF0ZXMubWV0cmljVHlwZXMubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICBkID0gb3B0WzBdLnZhbHVlOwogICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgfSk7CiAgICAgICAgc3RhdGVzLm1ldHJpY1R5cGVMaXN0ID0gc3RhdGVzLm1ldHJpY1R5cGVMaXN0Lm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgICAgZCA9IGw7CiAgICAgICAgICByZXR1cm4gZDsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZGFzaGJvYXJkU3RvcmUuc2VsZWN0V2lkZ2V0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGFzaGJvYXJkU3RvcmUuc2VsZWN0ZWRHcmlkKSwgewogICAgICAgIG1ldHJpY1R5cGVzOiBzdGF0ZXMubWV0cmljVHlwZXMKICAgICAgfSkpOwoKICAgICAgaWYgKHN0YXRlcy5pc0xpc3QpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHF1ZXJ5TWV0cmljcygpOwogICAgfQoKICAgIGZ1bmN0aW9uIHF1ZXJ5TWV0cmljcygpIHsKICAgICAgcmV0dXJuIF9xdWVyeU1ldHJpY3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfcXVlcnlNZXRyaWNzKCkgewogICAgICBfcXVlcnlNZXRyaWNzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgX2Rhc2hib2FyZFN0b3JlJHNlbGVjLCBtZXRyaWNDb25maWcsIG1ldHJpY1R5cGVzLCBtZXRyaWNzLCBjYXRhbG9nLCBwYXJhbXMsIGpzb24sIHNvdXJjZTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghc3RhdGVzLmlzTGlzdCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX2Rhc2hib2FyZFN0b3JlJHNlbGVjID0gZGFzaGJvYXJkU3RvcmUuc2VsZWN0ZWRHcmlkLCBtZXRyaWNDb25maWcgPSBfZGFzaGJvYXJkU3RvcmUkc2VsZWMubWV0cmljQ29uZmlnLCBtZXRyaWNUeXBlcyA9IF9kYXNoYm9hcmRTdG9yZSRzZWxlYy5tZXRyaWNUeXBlcywgbWV0cmljcyA9IF9kYXNoYm9hcmRTdG9yZSRzZWxlYy5tZXRyaWNzOwoKICAgICAgICAgICAgICAgIGlmIChtZXRyaWNzICYmIG1ldHJpY3NbMF0gJiYgbWV0cmljVHlwZXMgJiYgbWV0cmljVHlwZXNbMF0pIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiB1c2VHZXRNZXRyaWNFbnRpdHkobWV0cmljc1swXSwgbWV0cmljVHlwZXNbMF0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBjYXRhbG9nID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBwYXJhbXMgPSB1c2VRdWVyeVByb2Nlc3Nvcihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0YXRlcyksIHt9LCB7CiAgICAgICAgICAgICAgICAgIG1ldHJpY0NvbmZpZzogbWV0cmljQ29uZmlnLAogICAgICAgICAgICAgICAgICBjYXRhbG9nOiBjYXRhbG9nCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgaWYgKHBhcmFtcykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlbWl0KCJ1cGRhdGUiLCB7fSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBlbWl0KCJsb2FkaW5nIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIGRhc2hib2FyZFN0b3JlLmZldGNoTWV0cmljVmFsdWUocGFyYW1zKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIGpzb24gPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGVtaXQoImxvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICAgICAgaWYgKCFqc29uLmVycm9ycykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBFbE1lc3NhZ2UuZXJyb3IoanNvbi5lcnJvcnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgc291cmNlID0gdXNlU291cmNlUHJvY2Vzc29yKGpzb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RhdGVzKSwge30sIHsKICAgICAgICAgICAgICAgICAgbWV0cmljQ29uZmlnOiBtZXRyaWNDb25maWcKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIGVtaXQoInVwZGF0ZSIsIHNvdXJjZSk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CiAgICAgIHJldHVybiBfcXVlcnlNZXRyaWNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlRGFzaGJvYXJkKG9wdCkgewogICAgICBpZiAoIW9wdFswXSkgewogICAgICAgIHN0YXRlcy5kYXNoYm9hcmROYW1lID0gIiI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RhdGVzLmRhc2hib2FyZE5hbWUgPSBvcHRbMF0udmFsdWU7CiAgICAgIH0KCiAgICAgIHZhciBncmFwaCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGFzaGJvYXJkU3RvcmUuc2VsZWN0ZWRHcmlkLmdyYXBoKSwge30sIHsKICAgICAgICBkYXNoYm9hcmROYW1lOiBzdGF0ZXMuZGFzaGJvYXJkTmFtZQogICAgICB9KTsKCiAgICAgIGRhc2hib2FyZFN0b3JlLnNlbGVjdFdpZGdldChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZCksIHt9LCB7CiAgICAgICAgZ3JhcGg6IGdyYXBoCiAgICAgIH0pKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRNZXRyaWMoKSB7CiAgICAgIHN0YXRlcy5tZXRyaWNzLnB1c2goIiIpOwoKICAgICAgaWYgKCFzdGF0ZXMuaXNMaXN0KSB7CiAgICAgICAgc3RhdGVzLm1ldHJpY1R5cGVzLnB1c2goc3RhdGVzLm1ldHJpY1R5cGVzWzBdKTsKICAgICAgICBzdGF0ZXMubWV0cmljVHlwZUxpc3QucHVzaChzdGF0ZXMubWV0cmljVHlwZUxpc3RbMF0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgc3RhdGVzLm1ldHJpY1R5cGVzLnB1c2goIiIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlbGV0ZU1ldHJpYyhpbmRleCkgewogICAgICBpZiAoc3RhdGVzLm1ldHJpY3MubGVuZ3RoID09PSAxKSB7CiAgICAgICAgc3RhdGVzLm1ldHJpY3MgPSBbIiJdOwogICAgICAgIHN0YXRlcy5tZXRyaWNUeXBlcyA9IFsiIl07CiAgICAgICAgZGFzaGJvYXJkU3RvcmUuc2VsZWN0V2lkZ2V0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkYXNoYm9hcmRTdG9yZS5zZWxlY3RlZEdyaWQpLCB7CiAgICAgICAgICBtZXRyaWNUeXBlczogc3RhdGVzLm1ldHJpY1R5cGVzLAogICAgICAgICAgbWV0cmljczogc3RhdGVzLm1ldHJpY3MKICAgICAgICB9KSwge30sIHsKICAgICAgICAgIG1ldHJpY0NvbmZpZzogW10KICAgICAgICB9KSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBzdGF0ZXMubWV0cmljcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICBzdGF0ZXMubWV0cmljVHlwZXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgdmFyIGNvbmZpZyA9IGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZC5tZXRyaWNDb25maWcgfHwgW107CiAgICAgIHZhciBtZXRyaWNDb25maWcgPSBjb25maWdbaW5kZXhdID8gY29uZmlnLnNwbGljZShpbmRleCwgMSkgOiBjb25maWc7CiAgICAgIGRhc2hib2FyZFN0b3JlLnNlbGVjdFdpZGdldChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGFzaGJvYXJkU3RvcmUuc2VsZWN0ZWRHcmlkKSwgewogICAgICAgIG1ldHJpY1R5cGVzOiBzdGF0ZXMubWV0cmljVHlwZXMsCiAgICAgICAgbWV0cmljczogc3RhdGVzLm1ldHJpY3MKICAgICAgfSksIHt9LCB7CiAgICAgICAgbWV0cmljQ29uZmlnOiBtZXRyaWNDb25maWcKICAgICAgfSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1ldHJpY1R5cGVMaXN0KHR5cGUpIHsKICAgICAgaWYgKHR5cGUgIT09IE1ldHJpY3NUeXBlLlJFR1VMQVJfVkFMVUUpIHsKICAgICAgICByZXR1cm4gTWV0cmljVHlwZXNbdHlwZV07CiAgICAgIH0KCiAgICAgIGlmIChzdGF0ZXMuaXNMaXN0IHx8IGdyYXBoLnZhbHVlLnR5cGUgPT09ICJUYWJsZSIpIHsKICAgICAgICByZXR1cm4gW3sKICAgICAgICAgIGxhYmVsOiAicmVhZCBhbGwgdmFsdWVzIGluIHRoZSBkdXJhdGlvbiIsCiAgICAgICAgICB2YWx1ZTogInJlYWRNZXRyaWNzVmFsdWVzIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAicmVhZCB0aGUgc2luZ2xlIHZhbHVlIGluIHRoZSBkdXJhdGlvbiIsCiAgICAgICAgICB2YWx1ZTogInJlYWRNZXRyaWNzVmFsdWUiCiAgICAgICAgfV07CiAgICAgIH0KCiAgICAgIHJldHVybiBNZXRyaWNUeXBlc1t0eXBlXTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNZXRyaWNDb25maWcoaW5kZXgpIHsKICAgICAgdmFyIG4gPSB7CiAgICAgICAgdW5pdDogIiIsCiAgICAgICAgbGFiZWw6ICIiLAogICAgICAgIGNhbGN1bGF0aW9uOiAiIiwKICAgICAgICBsYWJlbHNJbmRleDogIiIsCiAgICAgICAgc29ydE9yZGVyOiAiREVTIgogICAgICB9OwoKICAgICAgaWYgKCFkYXNoYm9hcmRTdG9yZS5zZWxlY3RlZEdyaWQubWV0cmljQ29uZmlnIHx8ICFkYXNoYm9hcmRTdG9yZS5zZWxlY3RlZEdyaWQubWV0cmljQ29uZmlnW2luZGV4XSkgewogICAgICAgIGN1cnJlbnRNZXRyaWNDb25maWcudmFsdWUgPSBuOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY3VycmVudE1ldHJpY0NvbmZpZy52YWx1ZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbiksIGRhc2hib2FyZFN0b3JlLnNlbGVjdGVkR3JpZC5tZXRyaWNDb25maWdbaW5kZXhdKTsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSkgewogICAgICB2YXIgX2NvbXBvbmVudF9TZWxlY3RvciA9IF9yZXNvbHZlQ29tcG9uZW50KCJTZWxlY3RvciIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZWxfcG9wb3ZlciA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbC1wb3BvdmVyIik7CgogICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgW191bnJlZihzdGF0ZXMpLmlzTGlzdCA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF91bnJlZih0KSgiZGFzaGJvYXJkcyIpKSwgMSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X1NlbGVjdG9yLCB7CiAgICAgICAgdmFsdWU6IF91bnJlZihzdGF0ZXMpLmRhc2hib2FyZE5hbWUgfHwgJycsCiAgICAgICAgb3B0aW9uczogX3VucmVmKHN0YXRlcykuZGFzaGJvYXJkTGlzdCwKICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgIHBsYWNlaG9sZGVyOiAiUGxlYXNlIHNlbGVjdCBhIGRhc2hib2FyZCBuYW1lIiwKICAgICAgICBvbkNoYW5nZTogY2hhbmdlRGFzaGJvYXJkLAogICAgICAgIGNsYXNzOiAic2VsZWN0b3JzIiwKICAgICAgICBjbGVhcmFibGU6IHRydWUKICAgICAgfSwgbnVsbCwgOCwgWyJ2YWx1ZSIsICJvcHRpb25zIl0pXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKHQpKCJtZXRyaWNzIikpLCAxKSwgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfdW5yZWYoc3RhdGVzKS5tZXRyaWNzLCBmdW5jdGlvbiAobWV0cmljLCBpbmRleCkgewogICAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIHsKICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICBjbGFzczogIm1ldHJpYy1pdGVtIgogICAgICAgIH0sIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9TZWxlY3RvciwgewogICAgICAgICAgdmFsdWU6IG1ldHJpYywKICAgICAgICAgIG9wdGlvbnM6IF91bnJlZihzdGF0ZXMpLm1ldHJpY0xpc3QsCiAgICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgICAgcGxhY2Vob2xkZXI6ICJTZWxlY3QgYSBtZXRyaWMiLAogICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCRldmVudCkgewogICAgICAgICAgICByZXR1cm4gY2hhbmdlTWV0cmljcyhpbmRleCwgJGV2ZW50KTsKICAgICAgICAgIH0sCiAgICAgICAgICBjbGFzczogInNlbGVjdG9ycyIKICAgICAgICB9LCBudWxsLCA4LCBbInZhbHVlIiwgIm9wdGlvbnMiLCAib25DaGFuZ2UiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X1NlbGVjdG9yLCB7CiAgICAgICAgICB2YWx1ZTogX3VucmVmKHN0YXRlcykubWV0cmljVHlwZXNbaW5kZXhdLAogICAgICAgICAgb3B0aW9uczogX3VucmVmKHN0YXRlcykubWV0cmljVHlwZUxpc3RbaW5kZXhdLAogICAgICAgICAgc2l6ZTogInNtYWxsIiwKICAgICAgICAgIGRpc2FibGVkOiBfdW5yZWYoZ3JhcGgpLnR5cGUgJiYgIV91bnJlZihzdGF0ZXMpLmlzTGlzdCAmJiBpbmRleCAhPT0gMCwKICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgkZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZU1ldHJpY1R5cGUoaW5kZXgsICRldmVudCk7CiAgICAgICAgICB9LAogICAgICAgICAgY2xhc3M6ICJzZWxlY3RvcnMiCiAgICAgICAgfSwgbnVsbCwgOCwgWyJ2YWx1ZSIsICJvcHRpb25zIiwgImRpc2FibGVkIiwgIm9uQ2hhbmdlIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9wb3BvdmVyLCB7CiAgICAgICAgICBwbGFjZW1lbnQ6ICJ0b3AiLAogICAgICAgICAgd2lkdGg6IDQwMCwKICAgICAgICAgIHRyaWdnZXI6ICJjbGljayIKICAgICAgICB9LCB7CiAgICAgICAgICByZWZlcmVuY2U6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgewogICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2V0TWV0cmljQ29uZmlnKGluZGV4KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIFtfY3JlYXRlVk5vZGUoSWNvbiwgewogICAgICAgICAgICAgIGNsYXNzOiAiY3AgbXItNSIsCiAgICAgICAgICAgICAgaWNvbk5hbWU6ICJtb2RlX2VkaXQiLAogICAgICAgICAgICAgIHNpemU6ICJtaWRkbGUiCiAgICAgICAgICAgIH0pXSwgOCwgX2hvaXN0ZWRfMildOwogICAgICAgICAgfSksCiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBbX2NyZWF0ZVZOb2RlKFN0YW5kYXJkLCB7CiAgICAgICAgICAgICAgb25VcGRhdGU6IHF1ZXJ5TWV0cmljcywKICAgICAgICAgICAgICBjdXJyZW50TWV0cmljQ29uZmlnOiBjdXJyZW50TWV0cmljQ29uZmlnLnZhbHVlLAogICAgICAgICAgICAgIGluZGV4OiBpbmRleAogICAgICAgICAgICB9LCBudWxsLCA4LCBbImN1cnJlbnRNZXRyaWNDb25maWciLCAiaW5kZXgiXSldOwogICAgICAgICAgfSksCiAgICAgICAgICBfOiAyCiAgICAgICAgfSwgMTAyNCksIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgbnVsbCwgW2luZGV4ID09PSBfdW5yZWYoc3RhdGVzKS5tZXRyaWNzLmxlbmd0aCAtIDEgJiYgX3VucmVmKHN0YXRlcykubWV0cmljcy5sZW5ndGggPCBkZWZhdWx0TGVuLnZhbHVlID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKEljb24sIHsKICAgICAgICAgIGtleTogMCwKICAgICAgICAgIGNsYXNzOiAiY3AgbXItNSIsCiAgICAgICAgICBpY29uTmFtZTogImFkZF9jaXJjbGVfb3V0bGluZWNvbnRyb2xfcG9pbnQiLAogICAgICAgICAgc2l6ZTogIm1pZGRsZSIsCiAgICAgICAgICBvbkNsaWNrOiBhZGRNZXRyaWMKICAgICAgICB9KSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKSwgX2NyZWF0ZVZOb2RlKEljb24sIHsKICAgICAgICAgIGNsYXNzOiAiY3AiLAogICAgICAgICAgaWNvbk5hbWU6ICJyZW1vdmVfY2lyY2xlX291dGxpbmUiLAogICAgICAgICAgc2l6ZTogIm1pZGRsZSIsCiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCRldmVudCkgewogICAgICAgICAgICByZXR1cm4gZGVsZXRlTWV0cmljKGluZGV4KTsKICAgICAgICAgIH0KICAgICAgICB9LCBudWxsLCA4LCBbIm9uQ2xpY2siXSldLCA1MTIpLCBbW192U2hvdywgX3VucmVmKHN0YXRlcykuaXNMaXN0IHx8IF91bnJlZihzdGF0ZXMpLm1ldHJpY1R5cGVzWzBdID09PSAncmVhZE1ldHJpY3NWYWx1ZXMnXV0pXSk7CiAgICAgIH0pLCAxMjgpKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZyhfdW5yZWYodCkoInZpc3VhbGl6YXRpb24iKSksIDEpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfdW5yZWYoc2V0VmlzVHlwZXMpLCBmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHsKICAgICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJzcGFuIiwgewogICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soJGV2ZW50KSB7CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VDaGFydFR5cGUodHlwZSk7CiAgICAgICAgICB9LAogICAgICAgICAgY2xhc3M6IF9ub3JtYWxpemVDbGFzcyh7CiAgICAgICAgICAgIGFjdGl2ZTogdHlwZS52YWx1ZSA9PT0gX3VucmVmKGdyYXBoKS50eXBlCiAgICAgICAgICB9KQogICAgICAgIH0sIF90b0Rpc3BsYXlTdHJpbmcodHlwZS5sYWJlbCksIDExLCBfaG9pc3RlZF80KTsKICAgICAgfSksIDEyOCkpXSldLCA2NCk7CiAgICB9OwogIH0KfSk7"},null]}