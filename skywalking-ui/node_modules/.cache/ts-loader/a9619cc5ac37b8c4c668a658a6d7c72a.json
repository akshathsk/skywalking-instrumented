{"remainingRequest":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/trace/components/D3Graph/Index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/trace/components/D3Graph/Index.vue","mtime":1661850019000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1661850018000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1663881222784},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1663881222612},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1663881224500},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1663881224684},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1663881222784},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js","mtime":1663881224404}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9zazExNy9maW5hbC1wcm9qZWN0L2FwYWNoZS1za3l3YWxraW5nLWFwbS05LjIuMC9za3l3YWxraW5nLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvYXBhY2hlLXNreXdhbGtpbmctYXBtLTkuMi4wL3NreXdhbGtpbmctdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiOwppbXBvcnQgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIgZnJvbSAiL2hvbWUvc2sxMTcvZmluYWwtcHJvamVjdC9hcGFjaGUtc2t5d2Fsa2luZy1hcG0tOS4yLjAvc2t5d2Fsa2luZy11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnOwppbXBvcnQgeyByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHZTaG93IGFzIF92U2hvdywgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgd2l0aEN0eCBhcyBfd2l0aEN0eCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gInZ1ZSI7Cgp2YXIgX3dpdGhTY29wZUlkID0gZnVuY3Rpb24gX3dpdGhTY29wZUlkKG4pIHsKICByZXR1cm4gX3B1c2hTY29wZUlkKCJkYXRhLXYtNDZhMmM2YWIiKSwgbiA9IG4oKSwgX3BvcFNjb3BlSWQoKSwgbjsKfTsKCnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAidHJhY2UtdC1sb2FkaW5nIgp9OwppbXBvcnQgeyByZWYsIHdhdGNoLCBvbkJlZm9yZVVubW91bnQsIG9uTW91bnRlZCB9IGZyb20gInZ1ZSI7CmltcG9ydCBfIGZyb20gImxvZGFzaCI7CmltcG9ydCAqIGFzIGQzIGZyb20gImQzIjsKaW1wb3J0IExpc3RHcmFwaCBmcm9tICIuLi8uLi91dGlscy9kMy10cmFjZS1saXN0IjsKaW1wb3J0IFRyZWVHcmFwaCBmcm9tICIuLi8uLi91dGlscy9kMy10cmFjZS10cmVlIjsKaW1wb3J0IFNwYW5EZXRhaWwgZnJvbSAiLi9TcGFuRGV0YWlsLnZ1ZSI7Ci8qIGdsb2JhbCBkZWZpbmVQcm9wcywgTnVsbGFibGUsIGRlZmluZUV4cG9zZSovCgpleHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7CiAgcHJvcHM6IHsKICAgIGRhdGE6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIHRyYWNlSWQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAiIgogICAgfSwKICAgIHR5cGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAiTGlzdCIKICAgIH0KICB9LAogIHNldHVwOiBmdW5jdGlvbiBzZXR1cChfX3Byb3BzLCBfcmVmKSB7CiAgICB2YXIgZXhwb3NlID0gX3JlZi5leHBvc2U7CiAgICB2YXIgcHJvcHMgPSBfX3Byb3BzOwogICAgdmFyIGxvYWRpbmcgPSByZWYoZmFsc2UpOwogICAgdmFyIHNob3dEZXRhaWwgPSByZWYoZmFsc2UpOwogICAgdmFyIGZpeFNwYW5zU2l6ZSA9IHJlZigwKTsKICAgIHZhciBzZWdtZW50SWQgPSByZWYoW10pOwogICAgdmFyIGN1cnJlbnRTcGFuID0gcmVmKFtdKTsKICAgIHZhciByZWZTcGFucyA9IHJlZihbXSk7CiAgICB2YXIgdHJlZSA9IHJlZihudWxsKTsKICAgIHZhciB0cmFjZUdyYXBoID0gcmVmKG51bGwpOwogICAgZXhwb3NlKHsKICAgICAgdHJlZTogdHJlZQogICAgfSk7CiAgICBvbk1vdW50ZWQoZnVuY3Rpb24gKCkgewogICAgICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTsKICAgICAgY2hhbmdlVHJlZSgpOwoKICAgICAgaWYgKCF0cmFjZUdyYXBoLnZhbHVlKSB7CiAgICAgICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHByb3BzLnR5cGUgPT09ICJMaXN0IikgewogICAgICAgIHRyZWUudmFsdWUgPSBuZXcgTGlzdEdyYXBoKHRyYWNlR3JhcGgudmFsdWUsIGhhbmRsZVNlbGVjdFNwYW4pOwogICAgICAgIHRyZWUudmFsdWUuaW5pdCh7CiAgICAgICAgICBsYWJlbDogIlRSQUNFX1JPT1QiLAogICAgICAgICAgY2hpbGRyZW46IHNlZ21lbnRJZC52YWx1ZQogICAgICAgIH0sIHByb3BzLmRhdGEsIGZpeFNwYW5zU2l6ZS52YWx1ZSk7CiAgICAgICAgdHJlZS52YWx1ZS5kcmF3KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJlZS52YWx1ZSA9IG5ldyBUcmVlR3JhcGgodHJhY2VHcmFwaC52YWx1ZSwgaGFuZGxlU2VsZWN0U3Bhbik7CiAgICAgICAgdHJlZS52YWx1ZS5pbml0KHsKICAgICAgICAgIGxhYmVsOiAiIi5jb25jYXQocHJvcHMudHJhY2VJZCksCiAgICAgICAgICBjaGlsZHJlbjogc2VnbWVudElkLnZhbHVlCiAgICAgICAgfSwgcHJvcHMuZGF0YSk7CiAgICAgIH0KCiAgICAgIGxvYWRpbmcudmFsdWUgPSBmYWxzZTsKICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsIHJlc2l6ZSk7CiAgICB9KTsKCiAgICBmdW5jdGlvbiByZXNpemUoKSB7CiAgICAgIHRyZWUudmFsdWUucmVzaXplKCk7CiAgICB9CgogICAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0U3BhbihpKSB7CiAgICAgIGN1cnJlbnRTcGFuLnZhbHVlID0gaS5kYXRhOwogICAgICBzaG93RGV0YWlsLnZhbHVlID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmF2ZXJzZVRyZWUobm9kZSwgc3BhbklkLCBzZWdtZW50SWQsIGRhdGEpIHsKICAgICAgaWYgKCFub2RlIHx8IG5vZGUuaXNCcm9rZW4pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChub2RlLnNwYW5JZCA9PT0gc3BhbklkICYmIG5vZGUuc2VnbWVudElkID09PSBzZWdtZW50SWQpIHsKICAgICAgICBub2RlLmNoaWxkcmVuLnB1c2goZGF0YSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKG5vZGVJdGVtKSB7CiAgICAgICAgICB0cmF2ZXJzZVRyZWUobm9kZUl0ZW0sIHNwYW5JZCwgc2VnbWVudElkLCBkYXRhKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVRyZWUoKSB7CiAgICAgIGlmIChwcm9wcy5kYXRhLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQoKICAgICAgc2VnbWVudElkLnZhbHVlID0gW107CiAgICAgIHZhciBzZWdtZW50R3JvdXAgPSB7fTsKICAgICAgdmFyIHNlZ21lbnRJZEdyb3VwID0gW107CiAgICAgIHZhciBmaXhTcGFucyA9IFtdOwogICAgICB2YXIgc2VnbWVudEhlYWRlcnMgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihwcm9wcy5kYXRhKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHsKICAgICAgICAgIHZhciBzcGFuID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgaWYgKHNwYW4ucmVmcy5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIF9yZWZTcGFucyR2YWx1ZTsKCiAgICAgICAgICAgIChfcmVmU3BhbnMkdmFsdWUgPSByZWZTcGFucy52YWx1ZSkucHVzaC5hcHBseShfcmVmU3BhbnMkdmFsdWUsIF90b0NvbnN1bWFibGVBcnJheShzcGFuLnJlZnMpKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoc3Bhbi5wYXJlbnRTcGFuSWQgPT09IC0xKSB7CiAgICAgICAgICAgIHNlZ21lbnRIZWFkZXJzLnB1c2goc3Bhbik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgaXRlbSA9IHByb3BzLmRhdGEuZmluZChmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgIHJldHVybiBpLnNlZ21lbnRJZCA9PT0gc3Bhbi5zZWdtZW50SWQgJiYgaS5zcGFuSWQgPT09IHNwYW4uc3BhbklkIC0gMTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBmaXhTcGFuS2V5Q29udGVudCA9IHsKICAgICAgICAgICAgICB0cmFjZUlkOiBzcGFuLnRyYWNlSWQsCiAgICAgICAgICAgICAgc2VnbWVudElkOiBzcGFuLnNlZ21lbnRJZCwKICAgICAgICAgICAgICBzcGFuSWQ6IHNwYW4uc3BhbklkIC0gMSwKICAgICAgICAgICAgICBwYXJlbnRTcGFuSWQ6IHNwYW4uc3BhbklkIC0gMgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKCFpdGVtICYmICFfLmZpbmQoZml4U3BhbnMsIGZpeFNwYW5LZXlDb250ZW50KSkgewogICAgICAgICAgICAgIGZpeFNwYW5zLnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmaXhTcGFuS2V5Q29udGVudCksIHt9LCB7CiAgICAgICAgICAgICAgICByZWZzOiBbXSwKICAgICAgICAgICAgICAgIGVuZHBvaW50TmFtZTogIlZOb2RlOiAiLmNvbmNhdChzcGFuLnNlZ21lbnRJZCksCiAgICAgICAgICAgICAgICBzZXJ2aWNlQ29kZTogIlZpcnR1YWxOb2RlIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJbQnJva2VuXSAiLmNvbmNhdChzcGFuLnR5cGUpLAogICAgICAgICAgICAgICAgcGVlcjogIiIsCiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICJWaXJ0dWFsTm9kZTogIyIuY29uY2F0KHNwYW4uc3BhbklkIC0gMSksCiAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLAogICAgICAgICAgICAgICAgaXNCcm9rZW46IHRydWUsCiAgICAgICAgICAgICAgICBsYXllcjogIkJyb2tlbiIsCiAgICAgICAgICAgICAgICB0YWdzOiBbXSwKICAgICAgICAgICAgICAgIGxvZ3M6IFtdLAogICAgICAgICAgICAgICAgc3RhcnRUaW1lOiAwLAogICAgICAgICAgICAgICAgZW5kVGltZTogMAogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICBfbG9vcCgpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CgogICAgICBzZWdtZW50SGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChzcGFuKSB7CiAgICAgICAgaWYgKHNwYW4ucmVmcy5sZW5ndGgpIHsKICAgICAgICAgIHNwYW4ucmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHsKICAgICAgICAgICAgdmFyIGluZGV4ID0gcHJvcHMuZGF0YS5maW5kSW5kZXgoZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICByZXR1cm4gcmVmLnBhcmVudFNlZ21lbnRJZCA9PT0gaS5zZWdtZW50SWQgJiYgcmVmLnBhcmVudFNwYW5JZCA9PT0gaS5zcGFuSWQ7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGtub3duIGJyb2tlbiBub2RlLgogICAgICAgICAgICAgIHZhciBpID0gcmVmLnBhcmVudFNwYW5JZDsKICAgICAgICAgICAgICB2YXIgZml4U3BhbktleUNvbnRlbnQgPSB7CiAgICAgICAgICAgICAgICB0cmFjZUlkOiByZWYudHJhY2VJZCwKICAgICAgICAgICAgICAgIHNlZ21lbnRJZDogcmVmLnBhcmVudFNlZ21lbnRJZCwKICAgICAgICAgICAgICAgIHNwYW5JZDogaSwKICAgICAgICAgICAgICAgIHBhcmVudFNwYW5JZDogaSA+IC0xID8gMCA6IC0xCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgaWYgKCFfLmZpbmQoZml4U3BhbnMsIGZpeFNwYW5LZXlDb250ZW50KSkgewogICAgICAgICAgICAgICAgZml4U3BhbnMucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZpeFNwYW5LZXlDb250ZW50KSwge30sIHsKICAgICAgICAgICAgICAgICAgcmVmczogW10sCiAgICAgICAgICAgICAgICAgIGVuZHBvaW50TmFtZTogIlZOb2RlOiAiLmNvbmNhdChyZWYucGFyZW50U2VnbWVudElkKSwKICAgICAgICAgICAgICAgICAgc2VydmljZUNvZGU6ICJWaXJ0dWFsTm9kZSIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJbQnJva2VuXSAiLmNvbmNhdChyZWYudHlwZSksCiAgICAgICAgICAgICAgICAgIHBlZXI6ICIiLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICJWaXJ0dWFsTm9kZTogIyIuY29uY2F0KGkpLAogICAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLAogICAgICAgICAgICAgICAgICBpc0Jyb2tlbjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgbGF5ZXI6ICJCcm9rZW4iLAogICAgICAgICAgICAgICAgICB0YWdzOiBbXSwKICAgICAgICAgICAgICAgICAgbG9nczogW10sCiAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogMCwKICAgICAgICAgICAgICAgICAgZW5kVGltZTogMAogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgIH0gLy8gaWYgcm9vdCBicm9rZW4gbm9kZSBpcyBub3QgZXhpc3QsIGNyZWF0ZSBhIHJvb3QgYnJva2VuIG5vZGUuCgoKICAgICAgICAgICAgICBpZiAoZml4U3BhbktleUNvbnRlbnQucGFyZW50U3BhbklkID4gLTEpIHsKICAgICAgICAgICAgICAgIHZhciBmaXhSb290U3BhbktleUNvbnRlbnQgPSB7CiAgICAgICAgICAgICAgICAgIHRyYWNlSWQ6IHJlZi50cmFjZUlkLAogICAgICAgICAgICAgICAgICBzZWdtZW50SWQ6IHJlZi5wYXJlbnRTZWdtZW50SWQsCiAgICAgICAgICAgICAgICAgIHNwYW5JZDogMCwKICAgICAgICAgICAgICAgICAgcGFyZW50U3BhbklkOiAtMQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBpZiAoIV8uZmluZChmaXhTcGFucywgZml4Um9vdFNwYW5LZXlDb250ZW50KSkgewogICAgICAgICAgICAgICAgICBmaXhTcGFucy5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZml4Um9vdFNwYW5LZXlDb250ZW50KSwge30sIHsKICAgICAgICAgICAgICAgICAgICByZWZzOiBbXSwKICAgICAgICAgICAgICAgICAgICBlbmRwb2ludE5hbWU6ICJWTm9kZTogIi5jb25jYXQocmVmLnBhcmVudFNlZ21lbnRJZCksCiAgICAgICAgICAgICAgICAgICAgc2VydmljZUNvZGU6ICJWaXJ0dWFsTm9kZSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIltCcm9rZW5dICIuY29uY2F0KHJlZi50eXBlKSwKICAgICAgICAgICAgICAgICAgICBwZWVyOiAiIiwKICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICJWaXJ0dWFsTm9kZTogIzAiLAogICAgICAgICAgICAgICAgICAgIGlzRXJyb3I6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgaXNCcm9rZW46IHRydWUsCiAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICJCcm9rZW4iLAogICAgICAgICAgICAgICAgICAgIHRhZ3M6IFtdLAogICAgICAgICAgICAgICAgICAgIGxvZ3M6IFtdLAogICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogMCwKICAgICAgICAgICAgICAgICAgICBlbmRUaW1lOiAwCiAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIFtdLmNvbmNhdChmaXhTcGFucywgX3RvQ29uc3VtYWJsZUFycmF5KHByb3BzLmRhdGEpKS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgaS5sYWJlbCA9IGkuZW5kcG9pbnROYW1lIHx8ICJubyBvcGVyYXRpb24gbmFtZSI7CiAgICAgICAgaS5jaGlsZHJlbiA9IFtdOwoKICAgICAgICBpZiAoc2VnbWVudEdyb3VwW2kuc2VnbWVudElkXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBzZWdtZW50SWRHcm91cC5wdXNoKGkuc2VnbWVudElkKTsKICAgICAgICAgIHNlZ21lbnRHcm91cFtpLnNlZ21lbnRJZF0gPSBbXTsKICAgICAgICAgIHNlZ21lbnRHcm91cFtpLnNlZ21lbnRJZF0ucHVzaChpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VnbWVudEdyb3VwW2kuc2VnbWVudElkXS5wdXNoKGkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGZpeFNwYW5zU2l6ZS52YWx1ZSA9IGZpeFNwYW5zLmxlbmd0aDsKICAgICAgc2VnbWVudElkR3JvdXAuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHsKICAgICAgICB2YXIgY3VycmVudFNlZ21lbnQgPSBzZWdtZW50R3JvdXBbaWRdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBiLnBhcmVudFNwYW5JZCAtIGEucGFyZW50U3BhbklkOwogICAgICAgIH0pOwogICAgICAgIGN1cnJlbnRTZWdtZW50LmZvckVhY2goZnVuY3Rpb24gKHMpIHsKICAgICAgICAgIHZhciBpbmRleCA9IGN1cnJlbnRTZWdtZW50LmZpbmRJbmRleChmdW5jdGlvbiAoaSkgewogICAgICAgICAgICByZXR1cm4gaS5zcGFuSWQgPT09IHMucGFyZW50U3BhbklkOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICBpZiAoY3VycmVudFNlZ21lbnRbaW5kZXhdLmlzQnJva2VuICYmIGN1cnJlbnRTZWdtZW50W2luZGV4XS5wYXJlbnRTcGFuSWQgPT09IC0xIHx8ICFjdXJyZW50U2VnbWVudFtpbmRleF0uaXNCcm9rZW4pIHsKICAgICAgICAgICAgICBjdXJyZW50U2VnbWVudFtpbmRleF0uY2hpbGRyZW4ucHVzaChzKTsKICAgICAgICAgICAgICBjdXJyZW50U2VnbWVudFtpbmRleF0uY2hpbGRyZW4uc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuc3BhbklkIC0gYi5zcGFuSWQ7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAocy5pc0Jyb2tlbikgewogICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBfLmZpbHRlcihwcm9wcy5kYXRhLCBmdW5jdGlvbiAoc3BhbikgewogICAgICAgICAgICAgIHJldHVybiBfLmZpbmQoc3Bhbi5yZWZzLCB7CiAgICAgICAgICAgICAgICB0cmFjZUlkOiBzLnRyYWNlSWQsCiAgICAgICAgICAgICAgICBwYXJlbnRTZWdtZW50SWQ6IHMuc2VnbWVudElkLAogICAgICAgICAgICAgICAgcGFyZW50U3BhbklkOiBzLnNwYW5JZAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgdmFyIF9zJGNoaWxkcmVuOwoKICAgICAgICAgICAgICAoX3MkY2hpbGRyZW4gPSBzLmNoaWxkcmVuKS5wdXNoLmFwcGx5KF9zJGNoaWxkcmVuLCBfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW4pKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHNlZ21lbnRHcm91cFtpZF0gPSBjdXJyZW50U2VnbWVudFtjdXJyZW50U2VnbWVudC5sZW5ndGggLSAxXTsKICAgICAgfSk7CiAgICAgIHNlZ21lbnRJZEdyb3VwLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgc2VnbWVudEdyb3VwW2lkXS5yZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikgewogICAgICAgICAgaWYgKHJlZi50cmFjZUlkID09PSBwcm9wcy50cmFjZUlkKSB7CiAgICAgICAgICAgIHRyYXZlcnNlVHJlZShzZWdtZW50R3JvdXBbcmVmLnBhcmVudFNlZ21lbnRJZF0sIHJlZi5wYXJlbnRTcGFuSWQsIHJlZi5wYXJlbnRTZWdtZW50SWQsIHNlZ21lbnRHcm91cFtpZF0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIGZvciAodmFyIGkgaW4gc2VnbWVudEdyb3VwKSB7CiAgICAgICAgaWYgKHNlZ21lbnRHcm91cFtpXS5yZWZzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgc2VnbWVudElkLnZhbHVlLnB1c2goc2VnbWVudEdyb3VwW2ldKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHNlZ21lbnRJZC52YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgY29sbGFwc2UoaSk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbGxhcHNlKGQpIHsKICAgICAgaWYgKGQuY2hpbGRyZW4pIHsKICAgICAgICB2YXIgaXRlbSA9IHJlZlNwYW5zLnZhbHVlLmZpbmQoZnVuY3Rpb24gKHMpIHsKICAgICAgICAgIHJldHVybiBzLnBhcmVudFNwYW5JZCA9PT0gZC5zcGFuSWQgJiYgcy5wYXJlbnRTZWdtZW50SWQgPT09IGQuc2VnbWVudElkOwogICAgICAgIH0pOwogICAgICAgIHZhciBkdXIgPSBkLmVuZFRpbWUgLSBkLnN0YXJ0VGltZTsKICAgICAgICBkLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICAgIGR1ciAtPSBpLmVuZFRpbWUgLSBpLnN0YXJ0VGltZTsKICAgICAgICB9KTsKICAgICAgICBkLmR1ciA9IGR1ciA8IDAgPyAwIDogZHVyOwoKICAgICAgICBpZiAoaXRlbSkgewogICAgICAgICAgZC5jaGlsZHJlbiA9IGQuY2hpbGRyZW4uc29ydChjb21wYXJlKCJzdGFydFRpbWUiKSk7CiAgICAgICAgfQoKICAgICAgICBkLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICAgIHJldHVybiBjb2xsYXBzZShpKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbXBhcmUocCkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKG0sIG4pIHsKICAgICAgICB2YXIgYSA9IG1bcF07CiAgICAgICAgdmFyIGIgPSBuW3BdOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgICAgfTsKICAgIH0KCiAgICBvbkJlZm9yZVVubW91bnQoZnVuY3Rpb24gKCkgewogICAgICBkMy5zZWxlY3RBbGwoIi5kMy10aXAiKS5yZW1vdmUoKTsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsIHJlc2l6ZSk7CiAgICB9KTsKICAgIHdhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHByb3BzLmRhdGE7CiAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghcHJvcHMuZGF0YS5sZW5ndGgpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGxvYWRpbmcudmFsdWUgPSB0cnVlOwogICAgICBjaGFuZ2VUcmVlKCk7CiAgICAgIHRyZWUudmFsdWUuaW5pdCh7CiAgICAgICAgbGFiZWw6ICJUUkFDRV9ST09UIiwKICAgICAgICBjaGlsZHJlbjogc2VnbWVudElkLnZhbHVlCiAgICAgIH0sIHByb3BzLmRhdGEsIGZpeFNwYW5zU2l6ZS52YWx1ZSk7CiAgICAgIHRyZWUudmFsdWUuZHJhdyhmdW5jdGlvbiAoKSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7CiAgICAgICAgfSwgMjAwKTsKICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiBmdW5jdGlvbiAoX2N0eCwgX2NhY2hlKSB7CiAgICAgIHZhciBfY29tcG9uZW50X0ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiSWNvbiIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZWxfZGlhbG9nID0gX3Jlc29sdmVDb21wb25lbnQoImVsLWRpYWxvZyIpOwoKICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X0ljb24sIHsKICAgICAgICBpY29uTmFtZTogInNwaW5uZXIiLAogICAgICAgIHNpemU6ICJzbSIKICAgICAgfSldLCA1MTIpLCBbW192U2hvdywgbG9hZGluZy52YWx1ZV1dKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgICAgIHJlZl9rZXk6ICJ0cmFjZUdyYXBoIiwKICAgICAgICByZWY6IHRyYWNlR3JhcGgsCiAgICAgICAgY2xhc3M6ICJkMy1ncmFwaCIKICAgICAgfSwgbnVsbCwgNTEyKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZGlhbG9nLCB7CiAgICAgICAgbW9kZWxWYWx1ZTogc2hvd0RldGFpbC52YWx1ZSwKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIHNob3dEZXRhaWwudmFsdWUgPSAkZXZlbnQ7CiAgICAgICAgfSksCiAgICAgICAgImRlc3Ryb3ktb24tY2xvc2UiOiB0cnVlLAogICAgICAgIGZ1bGxzY3JlZW46ICIiLAogICAgICAgIG9uQ2xvc2VkOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgIHJldHVybiBzaG93RGV0YWlsLnZhbHVlID0gZmFsc2U7CiAgICAgICAgfSkKICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbX2NyZWF0ZVZOb2RlKFNwYW5EZXRhaWwsIHsKICAgICAgICAgICAgY3VycmVudFNwYW46IGN1cnJlbnRTcGFuLnZhbHVlCiAgICAgICAgICB9LCBudWxsLCA4LCBbImN1cnJlbnRTcGFuIl0pXTsKICAgICAgICB9KSwKICAgICAgICBfOiAxCiAgICAgIH0sIDgsIFsibW9kZWxWYWx1ZSJdKV0sIDY0KTsKICAgIH07CiAgfQp9KTs="},null]}