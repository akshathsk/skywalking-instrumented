{"remainingRequest":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/eslint-loader/index.js??ref--14-0!/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/trace/utils/trace-table.ts","dependencies":[{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/related/trace/utils/trace-table.ts","mtime":1661850019000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1661850018000},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1663881224252},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1663881222784},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1663881222612},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1663881224500},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1663881224684},{"path":"/home/sk117/final-project/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/eslint-loader/index.js","mtime":1663881222992}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}