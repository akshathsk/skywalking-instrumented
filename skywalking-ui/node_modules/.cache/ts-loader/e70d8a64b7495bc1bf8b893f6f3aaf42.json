{"remainingRequest":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js??ref--15-3!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/graphs/EndpointList.vue?vue&type=script&setup=true&lang=ts","dependencies":[{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/graphs/EndpointList.vue","mtime":1666468223584},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/babel.config.js","mtime":1666468223484},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1666468239564},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1666468229004},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1666468239640},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js","mtime":1666468249808}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvc2sxMTcvZmluYWwtcHJvamVjdC9jb3B5L2FwYWNoZS1za3l3YWxraW5nLWFwbS05LjIuMC9za3l3YWxraW5nLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9zazExNy9maW5hbC1wcm9qZWN0L2NvcHkvYXBhY2hlLXNreXdhbGtpbmctYXBtLTkuMi4wL3NreXdhbGtpbmctdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3NrMTE3L2ZpbmFsLXByb2plY3QvY29weS9hcGFjaGUtc2t5d2Fsa2luZy1hcG0tOS4yLjAvc2t5d2Fsa2luZy11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyI7CmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJzsKaW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIG5vcm1hbGl6ZVN0eWxlIGFzIF9ub3JtYWxpemVTdHlsZSwgdW5yZWYgYXMgX3VucmVmLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aFNjb3BlSWQgPSBmdW5jdGlvbiBfd2l0aFNjb3BlSWQobikgewogIHJldHVybiBfcHVzaFNjb3BlSWQoImRhdGEtdi0yMWEwMjI5MCIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuOwp9OwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJ0YWJsZSIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJzZWFyY2giCn07CnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAibGlzdCIKfTsKdmFyIF9ob2lzdGVkXzQgPSBbIm9uQ2xpY2siXTsKaW1wb3J0IHsgcmVmLCB3YXRjaCwgY29tcHV0ZWQgfSBmcm9tICJ2dWUiOwppbXBvcnQgeyB1c2VTZWxlY3RvclN0b3JlIH0gZnJvbSAiQC9zdG9yZS9tb2R1bGVzL3NlbGVjdG9ycyI7CmltcG9ydCB7IEVsTWVzc2FnZSB9IGZyb20gImVsZW1lbnQtcGx1cyI7CmltcG9ydCB7IHVzZURhc2hib2FyZFN0b3JlIH0gZnJvbSAiQC9zdG9yZS9tb2R1bGVzL2Rhc2hib2FyZCI7CmltcG9ydCB7IHVzZVF1ZXJ5UG9kc01ldHJpY3MsIHVzZVBvZHNTb3VyY2UgfSBmcm9tICJAL2hvb2tzL3VzZVByb2Nlc3NvciI7CmltcG9ydCB7IEVudGl0eVR5cGUgfSBmcm9tICIuLi9kYXRhIjsKaW1wb3J0IHJvdXRlciBmcm9tICJAL3JvdXRlciI7CmltcG9ydCBnZXREYXNoYm9hcmQgZnJvbSAiQC9ob29rcy91c2VEYXNoYm9hcmRzU2Vzc2lvbiI7CmltcG9ydCBDb2x1bW5HcmFwaCBmcm9tICIuL2NvbXBvbmVudHMvQ29sdW1uR3JhcGgudnVlIjsKLypnbG9iYWwgZGVmaW5lUHJvcHMgKi8KCmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9fZGVmaW5lQ29tcG9uZW50KHsKICBwcm9wczogewogICAgZGF0YTogewogICAgICB0eXBlOiBPYmplY3QKICAgIH0sCiAgICBjb25maWc6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbWV0cmljczogW10sCiAgICAgICAgICBtZXRyaWNUeXBlczogW10sCiAgICAgICAgICBkYXNoYm9hcmROYW1lOiAiIiwKICAgICAgICAgIGZvbnRTaXplOiAxMiwKICAgICAgICAgIGk6ICIiCiAgICAgICAgfTsKICAgICAgfQogICAgfSwKICAgIG5lZWRRdWVyeTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGludGVydmFsVGltZTogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9CiAgfSwKICBzZXR1cDogZnVuY3Rpb24gc2V0dXAoX19wcm9wcykgewogICAgdmFyIHByb3BzID0gX19wcm9wczsKICAgIHZhciBzZWxlY3RvclN0b3JlID0gdXNlU2VsZWN0b3JTdG9yZSgpOwogICAgdmFyIGRhc2hib2FyZFN0b3JlID0gdXNlRGFzaGJvYXJkU3RvcmUoKTsKICAgIHZhciBjaGFydExvYWRpbmcgPSByZWYoZmFsc2UpOwogICAgdmFyIGVuZHBvaW50cyA9IHJlZihbXSk7CiAgICB2YXIgc2VhcmNoVGV4dCA9IHJlZigiIik7CiAgICB2YXIgY29sTWV0cmljcyA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIChwcm9wcy5jb25maWcubWV0cmljcyB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGQ7CiAgICAgIH0pOwogICAgfSk7CgogICAgaWYgKHByb3BzLm5lZWRRdWVyeSkgewogICAgICBxdWVyeUVuZHBvaW50cygpOwogICAgfQoKICAgIGZ1bmN0aW9uIHF1ZXJ5RW5kcG9pbnRzKCkgewogICAgICByZXR1cm4gX3F1ZXJ5RW5kcG9pbnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gX3F1ZXJ5RW5kcG9pbnRzKCkgewogICAgICBfcXVlcnlFbmRwb2ludHMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlc3A7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY2hhcnRMb2FkaW5nLnZhbHVlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yU3RvcmUuZ2V0RW5kcG9pbnRzKHsKICAgICAgICAgICAgICAgICAga2V5d29yZDogc2VhcmNoVGV4dC52YWx1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgY2hhcnRMb2FkaW5nLnZhbHVlID0gZmFsc2U7CgogICAgICAgICAgICAgICAgaWYgKCFyZXNwLmVycm9ycykgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgRWxNZXNzYWdlLmVycm9yKHJlc3AuZXJyb3JzKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBlbmRwb2ludHMudmFsdWUgPSBzZWxlY3RvclN0b3JlLnBvZHM7CiAgICAgICAgICAgICAgICBxdWVyeUVuZHBvaW50TWV0cmljcyhlbmRwb2ludHMudmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKICAgICAgcmV0dXJuIF9xdWVyeUVuZHBvaW50cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHF1ZXJ5RW5kcG9pbnRNZXRyaWNzKF94KSB7CiAgICAgIHJldHVybiBfcXVlcnlFbmRwb2ludE1ldHJpY3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfcXVlcnlFbmRwb2ludE1ldHJpY3MoKSB7CiAgICAgIF9xdWVyeUVuZHBvaW50TWV0cmljcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoY3VycmVudFBvZHMpIHsKICAgICAgICB2YXIgbWV0cmljcywgbWV0cmljVHlwZXMsIHBhcmFtcywganNvbiwgbWV0cmljQ29uZmlnOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBvZHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBtZXRyaWNzID0gcHJvcHMuY29uZmlnLm1ldHJpY3MgfHwgW107CiAgICAgICAgICAgICAgICBtZXRyaWNUeXBlcyA9IHByb3BzLmNvbmZpZy5tZXRyaWNUeXBlcyB8fCBbXTsKCiAgICAgICAgICAgICAgICBpZiAoIShtZXRyaWNzLmxlbmd0aCAmJiBtZXRyaWNzWzBdICYmIG1ldHJpY1R5cGVzLmxlbmd0aCAmJiBtZXRyaWNUeXBlc1swXSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHVzZVF1ZXJ5UG9kc01ldHJpY3MoY3VycmVudFBvZHMsIHByb3BzLmNvbmZpZywgRW50aXR5VHlwZVsyXS52YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIHBhcmFtcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBkYXNoYm9hcmRTdG9yZS5mZXRjaE1ldHJpY1ZhbHVlKHBhcmFtcyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBqc29uID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFqc29uLmVycm9ycykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBFbE1lc3NhZ2UuZXJyb3IoanNvbi5lcnJvcnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgbWV0cmljQ29uZmlnID0gcHJvcHMuY29uZmlnLm1ldHJpY0NvbmZpZyB8fCBbXTsKICAgICAgICAgICAgICAgIGVuZHBvaW50cy52YWx1ZSA9IHVzZVBvZHNTb3VyY2UoY3VycmVudFBvZHMsIGpzb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMuY29uZmlnKSwge30sIHsKICAgICAgICAgICAgICAgICAgbWV0cmljQ29uZmlnOiBtZXRyaWNDb25maWcKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGVuZHBvaW50cy52YWx1ZSA9IGN1cnJlbnRQb2RzOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpOwogICAgICByZXR1cm4gX3F1ZXJ5RW5kcG9pbnRNZXRyaWNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2xpY2tFbmRwb2ludChzY29wZSkgewogICAgICB2YXIgX2dldERhc2hib2FyZCA9IGdldERhc2hib2FyZCh7CiAgICAgICAgbmFtZTogcHJvcHMuY29uZmlnLmRhc2hib2FyZE5hbWUsCiAgICAgICAgbGF5ZXI6IGRhc2hib2FyZFN0b3JlLmxheWVySWQsCiAgICAgICAgZW50aXR5OiBFbnRpdHlUeXBlWzJdLnZhbHVlCiAgICAgIH0pLAogICAgICAgICAgZGFzaGJvYXJkID0gX2dldERhc2hib2FyZC5kYXNoYm9hcmQ7CgogICAgICBpZiAoIWRhc2hib2FyZCkgewogICAgICAgIEVsTWVzc2FnZS5lcnJvcigiTm8gdGhpcyBkYXNoYm9hcmQiKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHJvdXRlci5wdXNoKCIvZGFzaGJvYXJkLyIuY29uY2F0KGRhc2hib2FyZC5sYXllciwgIi8iKS5jb25jYXQoZGFzaGJvYXJkLmVudGl0eSwgIi8iKS5jb25jYXQoc2VsZWN0b3JTdG9yZS5jdXJyZW50U2VydmljZS5pZCwgIi8iKS5jb25jYXQoc2NvcGUucm93LmlkLCAiLyIpLmNvbmNhdChkYXNoYm9hcmQubmFtZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlYXJjaExpc3QoKSB7CiAgICAgIHJldHVybiBfc2VhcmNoTGlzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9zZWFyY2hMaXN0KCkgewogICAgICBfc2VhcmNoTGlzdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUVuZHBvaW50cygpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSk7CiAgICAgIHJldHVybiBfc2VhcmNoTGlzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHdhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocHJvcHMuY29uZmlnLm1ldHJpY1R5cGVzIHx8IFtdKSwgX3RvQ29uc3VtYWJsZUFycmF5KHByb3BzLmNvbmZpZy5tZXRyaWNzIHx8IFtdKSk7CiAgICB9LCBmdW5jdGlvbiAoZGF0YSwgb2xkKSB7CiAgICAgIGlmIChKU09OLnN0cmluZ2lmeShkYXRhKSA9PT0gSlNPTi5zdHJpbmdpZnkob2xkKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgcXVlcnlFbmRwb2ludE1ldHJpY3MoZW5kcG9pbnRzLnZhbHVlKTsKICAgIH0pOwogICAgd2F0Y2goZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gc2VsZWN0b3JTdG9yZS5jdXJyZW50U2VydmljZTsKICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgcXVlcnlFbmRwb2ludHMoKTsKICAgIH0pOwogICAgd2F0Y2goZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHByb3BzLmNvbmZpZy5tZXRyaWNDb25maWcgfHwgW10pOwogICAgfSwgZnVuY3Rpb24gKGRhdGEsIG9sZCkgewogICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoZGF0YSkgPT09IEpTT04uc3RyaW5naWZ5KG9sZCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHF1ZXJ5RW5kcG9pbnRNZXRyaWNzKGVuZHBvaW50cy52YWx1ZSk7CiAgICB9KTsKICAgIHJldHVybiBmdW5jdGlvbiAoX2N0eCwgX2NhY2hlKSB7CiAgICAgIHZhciBfY29tcG9uZW50X0ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiSWNvbiIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZWxfYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoImVsLWJ1dHRvbiIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZWxfaW5wdXQgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtaW5wdXQiKTsKCiAgICAgIHZhciBfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbC10YWJsZS1jb2x1bW4iKTsKCiAgICAgIHZhciBfY29tcG9uZW50X2VsX3RhYmxlID0gX3Jlc29sdmVDb21wb25lbnQoImVsLXRhYmxlIik7CgogICAgICB2YXIgX2RpcmVjdGl2ZV9sb2FkaW5nID0gX3Jlc29sdmVEaXJlY3RpdmUoImxvYWRpbmciKTsKCiAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfaW5wdXQsIHsKICAgICAgICBtb2RlbFZhbHVlOiBzZWFyY2hUZXh0LnZhbHVlLAogICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gc2VhcmNoVGV4dC52YWx1ZSA9ICRldmVudDsKICAgICAgICB9KSwKICAgICAgICBwbGFjZWhvbGRlcjogIlBsZWFzZSBpbnB1dCBlbmRwb2ludCBuYW1lIiwKICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgIG9uQ2hhbmdlOiBzZWFyY2hMaXN0LAogICAgICAgIGNsYXNzOiAiaW5wdXRzIgogICAgICB9LCB7CiAgICAgICAgYXBwZW5kOiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2J1dHRvbiwgewogICAgICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgICAgICBvbkNsaWNrOiBzZWFyY2hMaXN0CiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X0ljb24sIHsKICAgICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgICBpY29uTmFtZTogInNlYXJjaCIKICAgICAgICAgICAgICB9KV07CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfOiAxCiAgICAgICAgICB9KV07CiAgICAgICAgfSksCiAgICAgICAgXzogMQogICAgICB9LCA4LCBbIm1vZGVsVmFsdWUiXSldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMywgW193aXRoRGlyZWN0aXZlcygoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF90YWJsZSwgewogICAgICAgIGRhdGE6IGVuZHBvaW50cy52YWx1ZSwKICAgICAgICBzdHlsZTogewogICAgICAgICAgIndpZHRoIjogIjEwMCUiCiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHsKICAgICAgICAgICAgbGFiZWw6ICJFbmRwb2ludHMiCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uIChzY29wZSkgewogICAgICAgICAgICAgIHJldHVybiBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICAgICAgICAgICAgICAgIGNsYXNzOiAibGluayIsCiAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCRldmVudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gY2xpY2tFbmRwb2ludChzY29wZSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZSh7CiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAiIi5jb25jYXQoX19wcm9wcy5jb25maWcuZm9udFNpemUsICJweCIpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0sIF90b0Rpc3BsYXlTdHJpbmcoc2NvcGUucm93LmxhYmVsKSwgMTMsIF9ob2lzdGVkXzQpXTsKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF86IDEKICAgICAgICAgIH0pLCBfdW5yZWYoY29sTWV0cmljcykubGVuZ3RoID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKENvbHVtbkdyYXBoLCB7CiAgICAgICAgICAgIGtleTogMCwKICAgICAgICAgICAgaW50ZXJ2YWxUaW1lOiBfX3Byb3BzLmludGVydmFsVGltZSwKICAgICAgICAgICAgY29sTWV0cmljczogX3VucmVmKGNvbE1ldHJpY3MpLAogICAgICAgICAgICBjb25maWc6IF9fcHJvcHMuY29uZmlnCiAgICAgICAgICB9LCBudWxsLCA4LCBbImludGVydmFsVGltZSIsICJjb2xNZXRyaWNzIiwgImNvbmZpZyJdKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKV07CiAgICAgICAgfSksCiAgICAgICAgXzogMQogICAgICB9LCA4LCBbImRhdGEiXSkpLCBbW19kaXJlY3RpdmVfbG9hZGluZywgY2hhcnRMb2FkaW5nLnZhbHVlXV0pXSldKTsKICAgIH07CiAgfQp9KTs="},null]}