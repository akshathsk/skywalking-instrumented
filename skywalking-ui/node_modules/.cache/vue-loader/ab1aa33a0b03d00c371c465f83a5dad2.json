{"remainingRequest":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/graphs/InstanceList.vue?vue&type=script&setup=true&lang=ts","dependencies":[{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/graphs/InstanceList.vue","mtime":1666468223584},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/unplugin/dist/webpack/loaders/transform.js","mtime":1666468252648},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":1666468239564},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":1666468229004},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/ts-loader/index.js","mtime":1666468239640},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":1666468229208},{"path":"/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/node_modules/vue-loader-v16/dist/index.js","mtime":1666468249808}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnCmltcG9ydCB7IHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBub3JtYWxpemVTdHlsZSBhcyBfbm9ybWFsaXplU3R5bGUsIHVucmVmIGFzIF91bnJlZiwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIgoKY29uc3QgX3dpdGhTY29wZUlkID0gbiA9PiAoX3B1c2hTY29wZUlkKCJkYXRhLXYtNDdlZDljY2MiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pCmNvbnN0IF9ob2lzdGVkXzEgPSB7IGNsYXNzOiAidGFibGUiIH0KY29uc3QgX2hvaXN0ZWRfMiA9IHsgY2xhc3M6ICJzZWFyY2giIH0KY29uc3QgX2hvaXN0ZWRfMyA9IHsgY2xhc3M6ICJsaXN0IiB9CmNvbnN0IF9ob2lzdGVkXzQgPSBbIm9uQ2xpY2siXQpjb25zdCBfaG9pc3RlZF81ID0geyBjbGFzczogImxpbmsiIH0KY29uc3QgX2hvaXN0ZWRfNiA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJhdHRyaWJ1dGVzIgp9CgppbXBvcnQgeyByZWYsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gInZ1ZSI7CmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICJ2dWUtaTE4biI7CmltcG9ydCB7IEVsTWVzc2FnZSB9IGZyb20gImVsZW1lbnQtcGx1cyI7CmltcG9ydCB0eXBlIHsgUHJvcFR5cGUgfSBmcm9tICJ2dWUiOwppbXBvcnQgeyB1c2VTZWxlY3RvclN0b3JlIH0gZnJvbSAiQC9zdG9yZS9tb2R1bGVzL3NlbGVjdG9ycyI7CmltcG9ydCB7IHVzZURhc2hib2FyZFN0b3JlIH0gZnJvbSAiQC9zdG9yZS9tb2R1bGVzL2Rhc2hib2FyZCI7CmltcG9ydCB7IEluc3RhbmNlTGlzdENvbmZpZyB9IGZyb20gIkAvdHlwZXMvZGFzaGJvYXJkIjsKaW1wb3J0IHsgSW5zdGFuY2UgfSBmcm9tICJAL3R5cGVzL3NlbGVjdG9yIjsKaW1wb3J0IHsgdXNlUXVlcnlQb2RzTWV0cmljcywgdXNlUG9kc1NvdXJjZSB9IGZyb20gIkAvaG9va3MvdXNlUHJvY2Vzc29yIjsKaW1wb3J0IHsgRW50aXR5VHlwZSB9IGZyb20gIi4uL2RhdGEiOwppbXBvcnQgcm91dGVyIGZyb20gIkAvcm91dGVyIjsKaW1wb3J0IGdldERhc2hib2FyZCBmcm9tICJAL2hvb2tzL3VzZURhc2hib2FyZHNTZXNzaW9uIjsKaW1wb3J0IHsgTWV0cmljQ29uZmlnT3B0IH0gZnJvbSAiQC90eXBlcy9kYXNoYm9hcmQiOwppbXBvcnQgQ29sdW1uR3JhcGggZnJvbSAiLi9jb21wb25lbnRzL0NvbHVtbkdyYXBoLnZ1ZSI7CgovKmdsb2JhbCBkZWZpbmVQcm9wcyAqLwoKZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoewogIHByb3BzOiB7CiAgY29uZmlnOiB7CiAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8CiAgICAgIEluc3RhbmNlTGlzdENvbmZpZyAmIHsKICAgICAgICBpOiBzdHJpbmc7CiAgICAgICAgbWV0cmljczogc3RyaW5nW107CiAgICAgICAgbWV0cmljVHlwZXM6IHN0cmluZ1tdOwogICAgICAgIGlzRWRpdDogYm9vbGVhbjsKICAgICAgfSAmIHsgbWV0cmljQ29uZmlnOiBNZXRyaWNDb25maWdPcHRbXSB9CiAgICA+LAogICAgZGVmYXVsdDogKCkgPT4gKHsKICAgICAgZGFzaGJvYXJkTmFtZTogIiIsCiAgICAgIGZvbnRTaXplOiAxMiwKICAgICAgaTogIiIsCiAgICAgIG1ldHJpY3M6IFtdLAogICAgICBtZXRyaWNUeXBlczogW10sCiAgICB9KSwKICB9LAogIGludGVydmFsVGltZTogeyB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxzdHJpbmdbXT4sIGRlZmF1bHQ6ICgpID0+IFtdIH0sCiAgbmVlZFF1ZXJ5OiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sCn0sCiAgc2V0dXAoX19wcm9wcykgewoKY29uc3QgcHJvcHMgPSBfX3Byb3BzCgoKY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7CmNvbnN0IHNlbGVjdG9yU3RvcmUgPSB1c2VTZWxlY3RvclN0b3JlKCk7CmNvbnN0IGRhc2hib2FyZFN0b3JlID0gdXNlRGFzaGJvYXJkU3RvcmUoKTsKY29uc3QgY2hhcnRMb2FkaW5nID0gcmVmPGJvb2xlYW4+KGZhbHNlKTsKY29uc3QgaW5zdGFuY2VzID0gcmVmPEluc3RhbmNlW10+KFtdKTsgLy8gY3VycmVudCBpbnN0YW5jZXMKY29uc3QgcGFnZVNpemUgPSAxMDsKY29uc3Qgc2VhcmNoVGV4dCA9IHJlZjxzdHJpbmc+KCIiKTsKY29uc3QgY29sTWV0cmljcyA9IGNvbXB1dGVkKCgpID0+CiAgKHByb3BzLmNvbmZpZy5tZXRyaWNzIHx8IFtdKS5maWx0ZXIoKGQ6IHN0cmluZykgPT4gZCkKKTsKaWYgKHByb3BzLm5lZWRRdWVyeSkgewogIHF1ZXJ5SW5zdGFuY2UoKTsKfQoKYXN5bmMgZnVuY3Rpb24gcXVlcnlJbnN0YW5jZSgpIHsKICBjaGFydExvYWRpbmcudmFsdWUgPSB0cnVlOwogIGNvbnN0IHJlc3AgPSBhd2FpdCBzZWxlY3RvclN0b3JlLmdldFNlcnZpY2VJbnN0YW5jZXMoKTsKCiAgY2hhcnRMb2FkaW5nLnZhbHVlID0gZmFsc2U7CiAgaWYgKHJlc3AgJiYgcmVzcC5lcnJvcnMpIHsKICAgIEVsTWVzc2FnZS5lcnJvcihyZXNwLmVycm9ycyk7CiAgICBpbnN0YW5jZXMudmFsdWUgPSBbXTsKICAgIHJldHVybjsKICB9CiAgaW5zdGFuY2VzLnZhbHVlID0gc2VsZWN0b3JTdG9yZS5wb2RzLmZpbHRlcigKICAgIChkOiB1bmtub3duLCBpbmRleDogbnVtYmVyKSA9PiBpbmRleCA8IHBhZ2VTaXplCiAgKTsKICBxdWVyeUluc3RhbmNlTWV0cmljcyhpbnN0YW5jZXMudmFsdWUpOwp9Cgphc3luYyBmdW5jdGlvbiBxdWVyeUluc3RhbmNlTWV0cmljcyhjdXJyZW50SW5zdGFuY2VzOiBJbnN0YW5jZVtdKSB7CiAgaWYgKCFjdXJyZW50SW5zdGFuY2VzLmxlbmd0aCkgewogICAgcmV0dXJuOwogIH0KICBjb25zdCBtZXRyaWNzID0gcHJvcHMuY29uZmlnLm1ldHJpY3MgfHwgW107CiAgY29uc3QgbWV0cmljVHlwZXMgPSBwcm9wcy5jb25maWcubWV0cmljVHlwZXMgfHwgW107CgogIGlmIChtZXRyaWNzLmxlbmd0aCAmJiBtZXRyaWNzWzBdICYmIG1ldHJpY1R5cGVzLmxlbmd0aCAmJiBtZXRyaWNUeXBlc1swXSkgewogICAgY29uc3QgcGFyYW1zID0gYXdhaXQgdXNlUXVlcnlQb2RzTWV0cmljcygKICAgICAgY3VycmVudEluc3RhbmNlcywKICAgICAgcHJvcHMuY29uZmlnLAogICAgICBFbnRpdHlUeXBlWzNdLnZhbHVlCiAgICApOwogICAgY29uc3QganNvbiA9IGF3YWl0IGRhc2hib2FyZFN0b3JlLmZldGNoTWV0cmljVmFsdWUocGFyYW1zKTsKCiAgICBpZiAoanNvbi5lcnJvcnMpIHsKICAgICAgRWxNZXNzYWdlLmVycm9yKGpzb24uZXJyb3JzKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgbWV0cmljQ29uZmlnID0gcHJvcHMuY29uZmlnLm1ldHJpY0NvbmZpZyB8fCBbXTsKICAgIGluc3RhbmNlcy52YWx1ZSA9IHVzZVBvZHNTb3VyY2UoY3VycmVudEluc3RhbmNlcywganNvbiwgewogICAgICAuLi5wcm9wcy5jb25maWcsCiAgICAgIG1ldHJpY0NvbmZpZywKICAgIH0pOwogICAgcmV0dXJuOwogIH0KICBpbnN0YW5jZXMudmFsdWUgPSBjdXJyZW50SW5zdGFuY2VzOwp9CgpmdW5jdGlvbiBjbGlja0luc3RhbmNlKHNjb3BlOiBhbnkpIHsKICBjb25zdCB7IGRhc2hib2FyZCB9ID0gZ2V0RGFzaGJvYXJkKHsKICAgIG5hbWU6IHByb3BzLmNvbmZpZy5kYXNoYm9hcmROYW1lLAogICAgbGF5ZXI6IGRhc2hib2FyZFN0b3JlLmxheWVySWQsCiAgICBlbnRpdHk6IEVudGl0eVR5cGVbM10udmFsdWUsCiAgfSk7CiAgaWYgKCFkYXNoYm9hcmQpIHsKICAgIEVsTWVzc2FnZS5lcnJvcigiTm8gdGhpcyBkYXNoYm9hcmQiKTsKICAgIHJldHVybjsKICB9CiAgcm91dGVyLnB1c2goCiAgICBgL2Rhc2hib2FyZC8ke2Rhc2hib2FyZC5sYXllcn0vJHtkYXNoYm9hcmQuZW50aXR5fS8kewogICAgICBzZWxlY3RvclN0b3JlLmN1cnJlbnRTZXJ2aWNlLmlkCiAgICB9LyR7c2NvcGUucm93LmlkfS8ke2Rhc2hib2FyZC5uYW1lLnNwbGl0KCIgIikuam9pbigiLSIpfWAKICApOwp9CgpmdW5jdGlvbiBjaGFuZ2VQYWdlKHBhZ2VJbmRleDogbnVtYmVyKSB7CiAgaW5zdGFuY2VzLnZhbHVlID0gc2VsZWN0b3JTdG9yZS5wb2RzLmZpbHRlcigoZDogdW5rbm93biwgaW5kZXg6IG51bWJlcikgPT4gewogICAgaWYgKGluZGV4ID49IChwYWdlSW5kZXggLSAxKSAqIHBhZ2VTaXplICYmIGluZGV4IDwgcGFnZUluZGV4ICogcGFnZVNpemUpIHsKICAgICAgcmV0dXJuIGQ7CiAgICB9CiAgfSk7CiAgcXVlcnlJbnN0YW5jZU1ldHJpY3MoaW5zdGFuY2VzLnZhbHVlKTsKfQoKZnVuY3Rpb24gc2VhcmNoTGlzdCgpIHsKICBjb25zdCBzZWFyY2hJbnN0YW5jZXMgPSBzZWxlY3RvclN0b3JlLnBvZHMuZmlsdGVyKChkOiB7IGxhYmVsOiBzdHJpbmcgfSkgPT4KICAgIGQubGFiZWwuaW5jbHVkZXMoc2VhcmNoVGV4dC52YWx1ZSkKICApOwogIGluc3RhbmNlcy52YWx1ZSA9IHNlYXJjaEluc3RhbmNlcy5maWx0ZXIoCiAgICAoZDogdW5rbm93biwgaW5kZXg6IG51bWJlcikgPT4gaW5kZXggPCBwYWdlU2l6ZQogICk7CiAgcXVlcnlJbnN0YW5jZU1ldHJpY3MoaW5zdGFuY2VzLnZhbHVlKTsKfQoKd2F0Y2goCiAgKCkgPT4gWy4uLihwcm9wcy5jb25maWcubWV0cmljVHlwZXMgfHwgW10pLCAuLi4ocHJvcHMuY29uZmlnLm1ldHJpY3MgfHwgW10pXSwKICAoZGF0YSwgb2xkKSA9PiB7CiAgICBpZiAoSlNPTi5zdHJpbmdpZnkoZGF0YSkgPT09IEpTT04uc3RyaW5naWZ5KG9sZCkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgcXVlcnlJbnN0YW5jZU1ldHJpY3MoaW5zdGFuY2VzLnZhbHVlKTsKICB9Cik7CndhdGNoKAogICgpID0+IHNlbGVjdG9yU3RvcmUuY3VycmVudFNlcnZpY2UsCiAgKCkgPT4gewogICAgcXVlcnlJbnN0YW5jZSgpOwogIH0KKTsKd2F0Y2goCiAgKCkgPT4gWy4uLihwcm9wcy5jb25maWcubWV0cmljQ29uZmlnIHx8IFtdKV0sCiAgKGRhdGEsIG9sZCkgPT4gewogICAgaWYgKEpTT04uc3RyaW5naWZ5KGRhdGEpID09PSBKU09OLnN0cmluZ2lmeShvbGQpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHF1ZXJ5SW5zdGFuY2VNZXRyaWNzKGluc3RhbmNlcy52YWx1ZSk7CiAgfQopOwoKcmV0dXJuIChfY3R4OiBhbnksX2NhY2hlOiBhbnkpID0+IHsKICBjb25zdCBfY29tcG9uZW50X0ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiSWNvbiIpIQogIGNvbnN0IF9jb21wb25lbnRfZWxfYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoImVsLWJ1dHRvbiIpIQogIGNvbnN0IF9jb21wb25lbnRfZWxfaW5wdXQgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtaW5wdXQiKSEKICBjb25zdCBfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbC10YWJsZS1jb2x1bW4iKSEKICBjb25zdCBfY29tcG9uZW50X2VsX3BvcG92ZXIgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtcG9wb3ZlciIpIQogIGNvbnN0IF9jb21wb25lbnRfZWxfdGFibGUgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtdGFibGUiKSEKICBjb25zdCBfY29tcG9uZW50X2VsX3BhZ2luYXRpb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtcGFnaW5hdGlvbiIpIQogIGNvbnN0IF9kaXJlY3RpdmVfbG9hZGluZyA9IF9yZXNvbHZlRGlyZWN0aXZlKCJsb2FkaW5nIikhCgogIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbCiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbCiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2lucHV0LCB7CiAgICAgICAgbW9kZWxWYWx1ZTogc2VhcmNoVGV4dC52YWx1ZSwKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKCRldmVudDogYW55KSA9PiAoKHNlYXJjaFRleHQpLnZhbHVlID0gJGV2ZW50KSksCiAgICAgICAgcGxhY2Vob2xkZXI6ICJQbGVhc2UgaW5wdXQgaW5zdGFuY2UgbmFtZSIsCiAgICAgICAgc2l6ZTogInNtYWxsIiwKICAgICAgICBvbkNoYW5nZTogc2VhcmNoTGlzdCwKICAgICAgICBjbGFzczogImlucHV0cyIKICAgICAgfSwgewogICAgICAgIGFwcGVuZDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfYnV0dG9uLCB7CiAgICAgICAgICAgIHNpemU6ICJzbWFsbCIsCiAgICAgICAgICAgIG9uQ2xpY2s6IHNlYXJjaExpc3QKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0ljb24sIHsKICAgICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgICBpY29uTmFtZTogInNlYXJjaCIKICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgXzogMQogICAgICAgICAgfSkKICAgICAgICBdKSwKICAgICAgICBfOiAxCiAgICAgIH0sIDgsIFsibW9kZWxWYWx1ZSJdKQogICAgXSksCiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbCiAgICAgIF93aXRoRGlyZWN0aXZlcygoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF90YWJsZSwgewogICAgICAgIGRhdGE6IGluc3RhbmNlcy52YWx1ZSwKICAgICAgICBzdHlsZTogeyJ3aWR0aCI6IjEwMCUifQogICAgICB9LCB7CiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGFibGVfY29sdW1uLCB7IGxhYmVsOiAiU2VydmljZSBJbnN0YW5jZXMiIH0sIHsKICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHNjb3BlKSA9PiBbCiAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICAgICAgICAgICAgICAgIGNsYXNzOiAibGluayIsCiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoJGV2ZW50OiBhbnkpID0+IChjbGlja0luc3RhbmNlKHNjb3BlKSksCiAgICAgICAgICAgICAgICBzdHlsZTogX25vcm1hbGl6ZVN0eWxlKHsgZm9udFNpemU6IGAke19fcHJvcHMuY29uZmlnLmZvbnRTaXplfXB4YCB9KQogICAgICAgICAgICAgIH0sIF90b0Rpc3BsYXlTdHJpbmcoc2NvcGUucm93LmxhYmVsKSwgMTMsIF9ob2lzdGVkXzQpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfOiAxCiAgICAgICAgICB9KSwKICAgICAgICAgIChfdW5yZWYoY29sTWV0cmljcykubGVuZ3RoKQogICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhDb2x1bW5HcmFwaCwgewogICAgICAgICAgICAgICAga2V5OiAwLAogICAgICAgICAgICAgICAgaW50ZXJ2YWxUaW1lOiBfX3Byb3BzLmludGVydmFsVGltZSwKICAgICAgICAgICAgICAgIGNvbE1ldHJpY3M6IF91bnJlZihjb2xNZXRyaWNzKSwKICAgICAgICAgICAgICAgIGNvbmZpZzogX19wcm9wcy5jb25maWcKICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbImludGVydmFsVGltZSIsICJjb2xNZXRyaWNzIiwgImNvbmZpZyJdKSkKICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKSwKICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiwgeyBsYWJlbDogIkF0dHJpYnV0ZXMiIH0sIHsKICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHNjb3BlKSA9PiBbCiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfcG9wb3ZlciwgewogICAgICAgICAgICAgICAgcGxhY2VtZW50OiAibGVmdCIsCiAgICAgICAgICAgICAgICB3aWR0aDogNDAwLAogICAgICAgICAgICAgICAgdHJpZ2dlcjogImNsaWNrIgogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfNSwgX3RvRGlzcGxheVN0cmluZyhfdW5yZWYodCkoInZpZXdBdHRyaWJ1dGVzIikpLCAxKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgIChzY29wZS5yb3cuYXR0cmlidXRlcy5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF82LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3Qoc2NvcGUucm93LmF0dHJpYnV0ZXMsIChhdHRyLCBpbmRleCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGF0dHIubmFtZSArIGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZSh7IGZvbnRTaXplOiBgJHtfX3Byb3BzLmNvbmZpZy5mb250U2l6ZX1weGAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogIm10LTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX3RvRGlzcGxheVN0cmluZyhhdHRyLm5hbWUpICsgIjogIiArIF90b0Rpc3BsYXlTdHJpbmcoYXR0ci52YWx1ZSB8fCBudWxsKSwgNSkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAxMjgpKQogICAgICAgICAgICAgICAgICAgICAgXSkpCiAgICAgICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfOiAyCiAgICAgICAgICAgICAgfSwgMTAyNCkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF86IDEKICAgICAgICAgIH0pCiAgICAgICAgXSksCiAgICAgICAgXzogMQogICAgICB9LCA4LCBbImRhdGEiXSkpLCBbCiAgICAgICAgW19kaXJlY3RpdmVfbG9hZGluZywgY2hhcnRMb2FkaW5nLnZhbHVlXQogICAgICBdKQogICAgXSksCiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9wYWdpbmF0aW9uLCB7CiAgICAgIGNsYXNzOiAicGFnaW5hdGlvbiIsCiAgICAgIGJhY2tncm91bmQ6ICIiLAogICAgICBzbWFsbDogIiIsCiAgICAgIGxheW91dDogInByZXYsIHBhZ2VyLCBuZXh0IiwKICAgICAgInBhZ2Utc2l6ZSI6IHBhZ2VTaXplLAogICAgICB0b3RhbDogX3VucmVmKHNlbGVjdG9yU3RvcmUpLnBvZHMubGVuZ3RoLAogICAgICBvbkN1cnJlbnRDaGFuZ2U6IGNoYW5nZVBhZ2UsCiAgICAgIG9uUHJldkNsaWNrOiBjaGFuZ2VQYWdlLAogICAgICBvbk5leHRDbGljazogY2hhbmdlUGFnZQogICAgfSwgbnVsbCwgOCwgWyJ0b3RhbCJdKQogIF0pKQp9Cn0KCn0p"},{"version":3,"file":null,"sources":["/home/sk117/final-project/copy/apache-skywalking-apm-9.2.0/skywalking-ui/src/views/dashboard/graphs/InstanceList.vue"],"sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n<template>\n  <div class=\"table\">\n    <div class=\"search\">\n      <el-input\n        v-model=\"searchText\"\n        placeholder=\"Please input instance name\"\n        size=\"small\"\n        @change=\"searchList\"\n        class=\"inputs\"\n      >\n        <template #append>\n          <el-button size=\"small\" @click=\"searchList\">\n            <Icon size=\"sm\" iconName=\"search\" />\n          </el-button>\n        </template>\n      </el-input>\n    </div>\n    <div class=\"list\">\n      <el-table v-loading=\"chartLoading\" :data=\"instances\" style=\"width: 100%\">\n        <el-table-column label=\"Service Instances\">\n          <template #default=\"scope\">\n            <span\n              class=\"link\"\n              @click=\"clickInstance(scope)\"\n              :style=\"{ fontSize: `${config.fontSize}px` }\"\n            >\n              {{ scope.row.label }}\n            </span>\n          </template>\n        </el-table-column>\n        <ColumnGraph\n          v-if=\"colMetrics.length\"\n          :intervalTime=\"intervalTime\"\n          :colMetrics=\"colMetrics\"\n          :config=\"config\"\n        />\n        <el-table-column label=\"Attributes\">\n          <template #default=\"scope\">\n            <el-popover placement=\"left\" :width=\"400\" trigger=\"click\">\n              <template #reference>\n                <span class=\"link\">{{ t(\"viewAttributes\") }}</span>\n              </template>\n              <div class=\"attributes\" v-if=\"scope.row.attributes.length\">\n                <div\n                  v-for=\"(attr, index) in scope.row.attributes\"\n                  :key=\"attr.name + index\"\n                  :style=\"{ fontSize: `${config.fontSize}px` }\"\n                  class=\"mt-5\"\n                >\n                  {{ attr.name }}: {{ attr.value || null }}\n                </div>\n              </div>\n            </el-popover>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n    <el-pagination\n      class=\"pagination\"\n      background\n      small\n      layout=\"prev, pager, next\"\n      :page-size=\"pageSize\"\n      :total=\"selectorStore.pods.length\"\n      @current-change=\"changePage\"\n      @prev-click=\"changePage\"\n      @next-click=\"changePage\"\n    />\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { ref, watch, computed } from \"vue\";\nimport { useI18n } from \"vue-i18n\";\nimport { ElMessage } from \"element-plus\";\nimport type { PropType } from \"vue\";\nimport { useSelectorStore } from \"@/store/modules/selectors\";\nimport { useDashboardStore } from \"@/store/modules/dashboard\";\nimport { InstanceListConfig } from \"@/types/dashboard\";\nimport { Instance } from \"@/types/selector\";\nimport { useQueryPodsMetrics, usePodsSource } from \"@/hooks/useProcessor\";\nimport { EntityType } from \"../data\";\nimport router from \"@/router\";\nimport getDashboard from \"@/hooks/useDashboardsSession\";\nimport { MetricConfigOpt } from \"@/types/dashboard\";\nimport ColumnGraph from \"./components/ColumnGraph.vue\";\n\n/*global defineProps */\nconst props = defineProps({\n  config: {\n    type: Object as PropType<\n      InstanceListConfig & {\n        i: string;\n        metrics: string[];\n        metricTypes: string[];\n        isEdit: boolean;\n      } & { metricConfig: MetricConfigOpt[] }\n    >,\n    default: () => ({\n      dashboardName: \"\",\n      fontSize: 12,\n      i: \"\",\n      metrics: [],\n      metricTypes: [],\n    }),\n  },\n  intervalTime: { type: Array as PropType<string[]>, default: () => [] },\n  needQuery: { type: Boolean, default: false },\n});\nconst { t } = useI18n();\nconst selectorStore = useSelectorStore();\nconst dashboardStore = useDashboardStore();\nconst chartLoading = ref<boolean>(false);\nconst instances = ref<Instance[]>([]); // current instances\nconst pageSize = 10;\nconst searchText = ref<string>(\"\");\nconst colMetrics = computed(() =>\n  (props.config.metrics || []).filter((d: string) => d)\n);\nif (props.needQuery) {\n  queryInstance();\n}\n\nasync function queryInstance() {\n  chartLoading.value = true;\n  const resp = await selectorStore.getServiceInstances();\n\n  chartLoading.value = false;\n  if (resp && resp.errors) {\n    ElMessage.error(resp.errors);\n    instances.value = [];\n    return;\n  }\n  instances.value = selectorStore.pods.filter(\n    (d: unknown, index: number) => index < pageSize\n  );\n  queryInstanceMetrics(instances.value);\n}\n\nasync function queryInstanceMetrics(currentInstances: Instance[]) {\n  if (!currentInstances.length) {\n    return;\n  }\n  const metrics = props.config.metrics || [];\n  const metricTypes = props.config.metricTypes || [];\n\n  if (metrics.length && metrics[0] && metricTypes.length && metricTypes[0]) {\n    const params = await useQueryPodsMetrics(\n      currentInstances,\n      props.config,\n      EntityType[3].value\n    );\n    const json = await dashboardStore.fetchMetricValue(params);\n\n    if (json.errors) {\n      ElMessage.error(json.errors);\n      return;\n    }\n    const metricConfig = props.config.metricConfig || [];\n    instances.value = usePodsSource(currentInstances, json, {\n      ...props.config,\n      metricConfig,\n    });\n    return;\n  }\n  instances.value = currentInstances;\n}\n\nfunction clickInstance(scope: any) {\n  const { dashboard } = getDashboard({\n    name: props.config.dashboardName,\n    layer: dashboardStore.layerId,\n    entity: EntityType[3].value,\n  });\n  if (!dashboard) {\n    ElMessage.error(\"No this dashboard\");\n    return;\n  }\n  router.push(\n    `/dashboard/${dashboard.layer}/${dashboard.entity}/${\n      selectorStore.currentService.id\n    }/${scope.row.id}/${dashboard.name.split(\" \").join(\"-\")}`\n  );\n}\n\nfunction changePage(pageIndex: number) {\n  instances.value = selectorStore.pods.filter((d: unknown, index: number) => {\n    if (index >= (pageIndex - 1) * pageSize && index < pageIndex * pageSize) {\n      return d;\n    }\n  });\n  queryInstanceMetrics(instances.value);\n}\n\nfunction searchList() {\n  const searchInstances = selectorStore.pods.filter((d: { label: string }) =>\n    d.label.includes(searchText.value)\n  );\n  instances.value = searchInstances.filter(\n    (d: unknown, index: number) => index < pageSize\n  );\n  queryInstanceMetrics(instances.value);\n}\n\nwatch(\n  () => [...(props.config.metricTypes || []), ...(props.config.metrics || [])],\n  (data, old) => {\n    if (JSON.stringify(data) === JSON.stringify(old)) {\n      return;\n    }\n    queryInstanceMetrics(instances.value);\n  }\n);\nwatch(\n  () => selectorStore.currentService,\n  () => {\n    queryInstance();\n  }\n);\nwatch(\n  () => [...(props.config.metricConfig || [])],\n  (data, old) => {\n    if (JSON.stringify(data) === JSON.stringify(old)) {\n      return;\n    }\n    queryInstanceMetrics(instances.value);\n  }\n);\n</script>\n<style lang=\"scss\" scoped>\n@import \"./style.scss\";\n\n.chart {\n  height: 60px;\n}\n\n.inputs {\n  width: 300px;\n}\n\n.attributes {\n  max-height: 400px;\n  overflow: auto;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAqFA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpvrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhBC;AAqCrB;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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"}]}